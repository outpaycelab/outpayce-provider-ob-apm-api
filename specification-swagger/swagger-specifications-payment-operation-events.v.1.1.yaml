swagger: '2.0'
x-stoplight:
  id: 940615577432e
info:
  title: Outpayce Provider API Payment Operations Events
  version: 0.1.1
  contact:
    name: Payment Open Platform
    url: 'https://amadeus.com/payments'
    email: payment.support@amadeus.com
  description: |
    **Preliminary Note:** This document aims at describing how to use the Amadeus JSON API for core Payment *Operation* status change notification through *Event* posting. This is an early alpha version of the API that therefore is prone to change and has no contract value.
    Amadeus APIs comply with Amadeus REST/JSON Rules & Guideline v1.3 and are based on *application/vnd.amadeus+json* [media type](https://www.iana.org/assignments/media-types/media-types.xhtml). For further details please refer to [Outpayce Github](https://github.com/outpaycelab).

    ## Resource: *Operation Events*
    The main resource used here is the '*Operation Events*' resource. An *Operation Event* is describing an event in the lifecycle of an *Operation*.
    Currently, the operations supporting events are Authorizations and Refunds.

    ## Quickstart Guide

    ### 1. Pre-requisite - Operation creation
    Outpayce sent a payment operation to your system that accepted it. This operation is identified by its nature (i.e. authorization, capture or refund) and its *id*.
    In the payload of the operation request, you received a *WEBHOOK_URL* to which you can post *Events*.
    This *WEBHOOK_URL* respects the following pattern: https://{your-organization-name-in-outpayce}.payment.feeds.outpayce.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/{operation-collection}/{operation-id}/events.
    In this pattern, *your-organization-name-in-outpayce* is the agreed name attributed by outpayce to you during the onboarding phase.
    *operation-collection* is the collection of the concerned operation nature. It is therefore either *authorizations* , *captures* or *refunds*.
    *operation-id* is the identifier of the operation generated by Outpayce.

    For more details about this step, please refer to the Payment Operations swagger.

    ### 2. Notifying Outpayce of an Event

    Your system sends an event to Outpayce such as (here the example is a successful authorization event):

    ```
    POST https://your-organization-name-in-outpayce.payment.feeds.outpayce.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/authorizations/{operation-id}/events
    Content-Type: application/vnd.amadeus+json
    ...

    {
        "data": {
            "triggerEventName": "AUTHORIZATION_SUCCESS",
            "dateTime": "2033-12-31T04:54Z"
        }
    }
    ```

    Outpayce parses the event and after processing it, returns the following acknowledgment response:
    ```
    HTTP/1.1 200 OK
    Content-Type: application/vnd.amadeus+json

    {
        "data": {
            "status": "ACKNOWLEDGED"
        }
    }

    ```

    In case of operation pending, an event such as the following can be posted to Outpayce:

    ```
    POST https://{your-organization-name-in-outpayce}.payments.feeds.outpayce.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/authorizations/{operation-id}/events
       
    {   
        "data":{
            "triggerEventName": "AUTHORIZATION_PENDING",  
            "dateTime": "2018-11-19T04:54Z"
        }  
    }
    ```
    For Synchronous Payments, AUTHORIZATION_PENDING is not expected, and in case AUTHORIZATION_PENDING is received, the transaction is marked as denied.

    In case of operation failure, denial or cancellation, an event such as the following can be posted to Outpayce:

    ```
    POST https://{your-organization-name-in-outpayce}/payment.feeds.outpayce.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/{operation-collection}/{operation-id}/events
    Content-Type: application/vnd.amadeus+json
    ...

    {
        "data": {
            "triggerEventName": "AUTHORIZATION_DENIAL",
            "triggerEventReason": "FREE_TEXT",
            "triggerEventCodedReason": {
                "code": "12345",
                "text": "12345_TEXT"
            },
            "dateTime": "2033-12-31T04:54Z"
        }
    }
    ```
    Where *triggerEventCodedReason* allows you to perform detailed data about the failure/denial along the more generic *triggerEventReason*.

    ## API considerations

    ### application/vnd.amadeus+json overall structure
    Each request/response body is enclosed in a JSON envelope. The set of root level keys of that envelope is limited and support the API consumer pre-interactions. The main root level key is _data_ in input or in successful responses, and _errors_ for failing responses.

    Here is an example of a successful response body:
    ```
    {
        "warnings": [
            ...
        ],
        "data": {
            ...
        },
        "dictionaries": {
            ...
        },
        "included": [
            ...
        ],
        "meta": {
            ...
        }
    }
    ```

    And here is an example of a successful collection response body:
    ```
    {
        "warnings": [
            ...
        ],
        "data": [
            ...
        ],
        "dictionaries": {
            ...
        },
        "included": [
            ...
        ],
        "meta": {
            ...
        },
    }
    ```

    Please note that request bodies are not expected to contain warnings or errors.

    Here would be an example of a error response body:
    ```  
    {
        "warnings": [
            ...
        ],
        "errors": [
            ...
        ],
        "meta": {
            ...
        }
    }
    ```

    Warnings are non-blocking issues encountered during processing. Errors are functionally blocking issues preventing a successful processing.

    ### Semantic HTTP statuses

    In this API, HTTP statuses are semantically applied.

    Here are the main successful ones to consider (non-exhaustive list):
    - **200 OK.** Processing of the operation is successful.
    - **201 Created - FREQUENT business functional success.** Request was processed and resource instance was properly created.
    - **202 Accepted - FREQUENT business functional success.** Request was received but processing of the operation is still ongoing (e.g. asynchronous processing).

    And here are the main error categories returned (non-exhaustive list):
    - **409 Conflict.** Conflicting operation, for instance due to concurrent long action or locked resource.
    - **422 Unprocessable Entity - FREQUENT business functional failure.** Unprocessable request, mostly due to business context.
    - **424 Failed Dependency - FREQUENT business functional failure.** Business functional rejection from an external party downstream.
    - **502 Bad Gateway.** Communication error in an external party downstream.
    - **504 Gateway Timeout.** External party timeout error.
paths:
  '/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/{operation-type}/{operation-id}/events':
    parameters:
      - type: string
        name: your-organization-name-in-outpayce
        in: path
        required: true
      - type: string
        name: operation-id
        in: path
        required: true
      - type: string
        name: operation-type
        in: path
        required: true
    post:
      tags:
        - OperationEvent
      summary: ''
      description: This endpoints allows the posting of events regarding a specific payment operation
      operationId: post-payment-3rd-party-gateway-third-party-operations-operation-id
      responses:
        '200':
          description: OK
          schema:
            title: EventResponse
            type: object
            properties:
              data:
                type: object
                properties:
                  status:
                    type: string
        '400':
          $ref: '#/responses/error-response-400'
      parameters:
        - in: body
          name: body
          schema:
            type: object
            title: EventPayload
            properties:
              data:
                allOf:
                  - $ref: '#/definitions/Event'
                  - type: object
          description: ''
      x-stoplight:
        id: 5ijc0exo1y43e
host: your-organization-name-in-outpayce.payment.feeds.outpayce.com
schemes:
  - https
produces:
  - application/vnd.amadeus+json
consumes:
  - application/vnd.amadeus+json
definitions:
  ErrorResponse:
    title: Error Response
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
    x-stoplight:
      id: 8mst924mi9grm
  Error:
    type: object
    description: The Error Definition
    title: Error
    properties:
      status:
        type: integer
        description: 'The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.'
      code:
        type: integer
        description: 'A machine-readable error code, that will enable the API Consumers code to handle this type of error'
      title:
        type: string
        description: 'An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized'
      detail:
        type: string
        description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fieldâ€™s value can be localized.'
      source:
        type: object
        title: Error_Source
        properties:
          parameter:
            type: string
            description: The key of the URI path or query parameter that caused the error
          pointer:
            type: string
            description: 'A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error'
          example:
            type: string
            description: A sample input to guide the user when resolving this issue
    x-stoplight:
      id: j3jcbezyfss9q
  Event:
    title: EventLog
    type: object
    description: The object representing one event and its details
    properties:
      triggerEventName:
        type: string
        description: |
          Describes the nature of the event. The value should be one of the following:
          - AUTHORIZATION_SUCCESS : the authorization was successfully completed
          - AUTHORIZATION_FAILURE : a technical issue prevented the operation to be authorized
          - AUTHORIZATION_DENIAL : the issuer or the acquirer denied the authorization request
          - AUTHORIZATION_CANCELLATION :payment attempt was cancelled by the shopper or the shopper requested to go back to the merchant website.
          - AUTHORIZATION_PENDING : the authorization is pending as the status of the payment could not be established immediately. This could happen when either the systems are not available or requires further action from shopper to complete the payment.
          - CAPTURE_CLEARED : both acquirer and issuer agreed on the clearing of the operation
          - CAPTURE_FAILURE : a technical issue prevented the operation to be cleared
          - CAPTURE_DENIAL: the issuer or the acquirer denied the clearing request
          - REFUND_CLEARED : both acquirer and issuer agreed on the clearing of the operation
          - REFUND_FAILURE: a technical issue prevented the operation to be cleared
          - REFUND_DENIAL: the issuer or the acquire denied the clearing request
        example: AUTHORIZATION_SUCCESS
      triggerEventReason:
        type: string
        description: Reason why this event has been triggered. Free text.
      dateTime:
        type: string
        description: time of the change (ISO 8601)
        format: datetime
        example: '2033-12-31T04:54Z'
      triggerEventCodedReason:
        title: QualifiedCodedText.v1
        description: To be used by application that has a requirement to send the code and the description of the code
        type: object
        x-examples: {}
        properties:
          code:
            type: string
            description: This will return the code setup by an organization
          text:
            type: string
            description: Free Text
            example: Do you need and example ?
    required:
      - triggerEventName
    x-stoplight:
      id: kk4wg8safagh6
responses:
  error-response-400:
    description: |
      **400 Bad Request error.** Problem reading or understanding request (Usually missing data or invalid requests). Please find below an exhaustive list of errors:

      code   | - | title
      ------:|:-:|:-
        477  |   | INVALID FORMAT
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      INVALID FORMAT:
        errors:
          - code: 477
            title: INVALID FORMAT
tags:
  - name: OperationEvent
    description: |
      **POSTING AN EVENT REGARDING A SPECIFIC OPERATION**
basePath: /v1
securityDefinitions:
  1AAuth:
    name: Authorization
    type: apiKey
    in: header
