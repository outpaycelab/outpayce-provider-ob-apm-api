swagger: '2.0'
info:
  title: Outpayce Connect API Acceptance Payment Operations
  version: 0.4.0
  contact:
    name: Outpayce Provider API Discussions
    url: https://github.com/outpaycelab/outpayce-provider-ob-api/discussions
    email: providerapi.support@outpayce.com
  description: >
    **Preliminary Note:** This document aims at describing how to use the
    Amadeus JSON API for core Payment  *Operation* management, dealing with
    payment transactions.

    It is tailored for card only operations. This is an early alpha  version of
    the API that therefore is prone to change and has no contract value.

    Amadeus APIs comply with Amadeus REST/JSON Rules  & Guideline v1.3 and are
    based on *application/vnd.amadeus+json* [media
    type](https://www.iana.org/assignments/media-types/media-types.xhtml). For
    further details please refer to
    [developers.amadeus.com](https://developers.amadeus.com).
     ## Authentication
     ### *Basic HTTP Authentication method*:
     With this method, one of the request headers (Authorization request header) is populated with a username/password pair, encoded using Base64.
     ```
    Content-Type: "application/vnd.amadeus+json"
     Authorization: "Basic VXNlcm5hbWU6cGFzc3dvcmQ="
     ```

    ## Resource: *Operations*

    The main payment resource used here is the '*Operations*' resource. An
    *Operation* is either a payment operation implying or not a direct move of
    funds between a payer and a payee. An *Operation* is therefore an abstract
    resource  that may be one of the following: *Authorization*, *Reversal*,
    *Capture* and *Refund*.


    ### Payment Operation ontology


    #### *Authorization*

    An  *Authorization* is usually the first transaction performed during the
    acceptance stage of a payment, ie an agreement on some money to be
    exchanged, at once or later, between two parties, the individual or
    corporate *payer* and the *payee*. When successful, it usually results in
    the amount at  stake being blocked for a limited period of time on the
    payer's account.


    #### *Reversal*

    A *Reversal* is an optional transaction which  must be consecutive to a
    successful authorization performed during the acceptance stage of a payment.
    It consists in partially or fully reversing the previously authorized
    amount.


    #### *Capture* & *Refund*

    *Capture* and *Refund* are operations performed during the clearing stage of
    a payment, ie when service is sold and money has to be transferred, and vice
    versa. Depending on the payment, *Capture* could be immediate at
    *Authorization* time  when successful. This is what is called 1-step or
    single-message payment. In that case, the *Authorization* prevails and there
    is no use of any separate  *Capture*. Otherwise, money actually starts to
    move only when the act of *Capture* is confirmed, which is called 2-step or
    dual-message payment choreography.  When reimbursement is due, a *Refund*
    will be issued from the *payee* to the *payer*.


    ## Quickstart Guide


    ### 1. Merchant account setup

    Amadeus Payment Gateway sends payment operations on behalf of merchants. A
    merchant is identified in your system by a *MERCHANT_ACCOUNT*.


    ### 2. Authorization

    At the end of a fruitful shopping session, the client of the merchant agrees
    to pay with their payment card _4000000000000001_ for an amount of
    _123.45â‚¬_. Amadeus Payment Gateway collects the card information and sends a
    request to your system such as:

    ```

    PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId}
    HTTP/1.1

    Content-Type: application/vnd.amadeus+json

    ...

    {
      "data": {
          "id": "{authorizationId}",
          "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
          },
          "authorizationType": "AUTHORIZATION_ONLY",
          "method": "CARD",
          "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12"
          },
          "operationContext": {
              "merchantAccount": {
                  "name": "MERCHANT_ACCOUNT",
                  "login": "merchantLogin",
                  "password": {
                     "payload":"merchantPasword"
                  }
              }
         }
      }
    }

    ```


    Your application parses the request and after processing it, returns a
    response such as:
      ```
    HTTP/1.1 201 Created

    Location:
    https://{your-host-name}/outpayce/v1/authorizations/{authorizationId}

    Content-Type: application/vnd.amadeus+json

      {
        "data": {
            "id": "{authorizationId}",
            "method": "CARD",
            "card": {
                "vendorCode": "VI",
                "maskedCardNumber": "400000------0001"
            },
            "approvalCode": "APPROVAL_CODE",
            "timestamp": "2022-11-28T13:37:00Z"
        }
      }
      ```

    *With regards to Credit Card transactions, this is the minimum amount of
    data Outpayce expects to receive in the response. Without at least these
    fields, Outpayce will not be able to process the Authorization
    response.There are other optional fields that can be sent in the response
    such as **externalId** and **schemeTransactionId**.*

     Usually, after this successful operation, the order is confirmed and the checkout process ends here.

    ### 3. Reversal

    The client of the merchant decides to fully cancel the order. Amadeus
    Payment Gateway sends a reversal request to cancel the authorization to your
    system such as:

    ```

    PUT https://{your-host-name}/outpayce/v1/reversals/{reversalId} HTTP/1.1

    Content-Type: application/vnd.amadeus+json

    ...


    {
      "data": {
          "parentOperationId": "{authorizationId}",
          "id": "{reversalId}",
          "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
          },
          "method": "CARD",
          "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "expiryDate": "2024-12"
          },
          "approvalCode": "APPROVAL_CODE",
          "operationContext": {
              "merchantAccount": {
                  "name": "MERCHANT_ACCOUNT",
                  "login": "merchantLogin",
                  "password": {
                     "payload":"merchantPasword"
                  }
              }
          }
      }
    }

    ```


    Your application parses the request and after processing it, returns a
    response such as:

    ```

    HTTP/1.1 201 Created

    Location: https://{your-host-name}/outpayce/v1/reversals/{reversalId}

    Content-Type: application/vnd.amadeus+json


    {
      "data": {
          "parentOperationId": "{authorizationId}",
          "id": "{reversalId}",
          "method": "CARD",
          "card": {
              "vendorCode": "VI",
              "maskedCardNumber": "400000------0001"
          },
          "approvalCode": "APPROVAL_CODE",
          "timestamp": "2022-11-28T13:37:00Z"
      }
    }

    ```
     *With regards to Credit Card transactions, this is the minimum amount of data Outpayce expects to receive in the response. Without at least these fields, Outpayce will not be able to process the Reversal response.*

     ### 4. Capture

    When the sales is confirmed, contract is set and fulfillment starts. At that
    moment, payment is cleared against the sales.

    If the previous authorization was only "blocking" the payer's balance (i.e.
    authorizationType was "AUTHORIZATION_ONLY"), Amadeus Payment Gateway sends
    to your system an extra request to confirm and ask the acquiring bank to
    _capture_ the payment corresponding to what was eventually sold. This extra
    request is such as:

    ```
     PUT https://{your-host-name}/outpayce/v1/captures/{captureId} HTTP/1.1
    Content-Type: application/vnd.amadeus+json

    ...



    {
      "data": {
          "parentOperationId": "{authorizationId}",
          "id": "{captureId}",
          "amount": {
            "value": "123.45",
            "currencyCode": "EUR"
        },
        "method": "CARD",
        "card": {
          "vendorCode": "VI",
          "cardNumber": "4000000000000001",
          "expiryDate": "2024-12"
        },
        "approvalCode": "APPROVAL_CODE",
        "operationContext": {
            "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                   "payload":"merchantPasword"
                }
            },
         "links": [
              {
                  "rel": "webhook",
                  "href": "https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/captures/ae2db239-57a5-434c-b77c-29d6776a2bfa/events"
              }
          ]
        }
      }
    }

    ```


    Your application parses the request and after processing it, returns a
    response such as:

    ```

    HTTP/1.1 201 Created

    Location: https://{your-host-name}/outpayce/v1/captures/{captureId}

    Content-Type: application/vnd.amadeus+json


    {
      "data": {
        "parentOperationId": "{authorizationId}",
        "id": "{captureId}",
        "method": "CARD",
        "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
        },
        "status": "RECEIVED",
        "timestamp": "2022-11-28T15:18:00Z"
      }
    }

    ```

     *With regards to Credit Card transactions, this is the minimum amount of data Outpayce expects to receive in the response. Without at least these fields, Outpayce will not be able to process the Capture response.*

     ### 5. Refund
    In case of some after-sales case ending up in the merchant reimbursing the
    payer, Amadeus Payment Gateway will send to your system a request such as:

    ```

    PUT https://{your-host-name}/outpayce/v1/refunds/{refundId} HTTP/1.1

    Content-Type: application/vnd.amadeus+json

    ...



    {
      "data": {
        "parentOperationId": "{authorizationId}",
        "id": "{refundId}",
        "amount": {
          "value": "75.24",
          "currencyCode": "EUR"
        },
        "method": "CARD",
        "card": {
          "vendorCode": "VI",
          "cardNumber": "4000000000000001",
          "expiryDate": "2024-12"
        },
        "operationContext": {
          "merchantAccount": {
              "name": "MERCHANT_ACCOUNT",
              "login": "merchantLogin",
              "password": {
                 "payload":"merchantPasword"
                }
            },
          "links": [
              {
                  "rel": "webhook",
                  "href": "https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/refunds/ae2db239-57a5-434c-b77c-29d6776a2bfa/event"
              }
          ]
        }
      }
    }

    ```


    Your application parses the request and after processing it, returns a
    response such as:

    ```

    HTTP/1.1 201 Created

    Location: https://{your-host-name}/outpayce/v1/refunds/{refundId}

    Content-Type: application/vnd.amadeus+json

      {
      "data": {
        "parentOperationId": "{authorizationId}",
        "id": "{refundId}",
        "method": "CARD",
        "amount": {
          "value": "123.45",
          "currencyCode": "EUR"
        },
        "status": "RECEIVED",
        "timestamp": "2022-11-29T11:22:00Z"
      }
    }

    ```

     *With regards to Credit Card transactions, this is the minimum amount of data Outpayce expects to receive in the response. Without at least these fields, Outpayce will not be able to process the Refund response.*

     ## API considerations

    ### application/vnd.amadeus+json overall  structure

    Each request/response body is enclosed in a JSON envelope. The set of root
    level keys of that envelope is limited and support the API consumer
    pre-interactions. The main root level key is _data_ in input or in
    successful responses, and _errors_ for failing responses.


    Here is an example of a s uccessful response body:

    ```

    {
      "warnings": [
          ...
      ],
      "data": {
          ...
      },
      "dictionaries": {
          ...
      },
      "included": [
          ...
      ],
      "meta": {
          ...
        }
    }
     ```

    And here is an example of a successful collection response body:

    ```

    {
        "warnings": [
          ...
        ],
        "data": [
          ...
        ],
        "dictionaries": {
          ...
        },
        "included": [
          ...
        ],
        "meta": {
        ...
        },
      }
    ```


    Please note that request bodies are not expected to contain warnings or
    errors.


    Here would be an example of a error response body:

    ```

    {
      "errors": [
          {
              "status": 400,
              "code": 33660,
              "title": " MISSING REQUIRED INPUT PARAM(S) - PLEASE ADJUST REQUEST"
          }
      ]
    }
     ```

    Warnings are non-blocking issues encountered during processing. Errors are
    functionally blocking issues preventing a successful processing. Today
    Connect API Acceptance supports only error issues.


    ### Semantic HTTP statuses


    In this API, HTTP statuses are semantically applied.


    Here are the main successful ones to consider (non-exhaustive list):
      - **200 OK.** Processing of the operation is successful.
      - **201 Created - FREQUENT business functional success.** Request was processed and resource instance was properly created.
    - **202 Accepted - FREQUENT business functional success.** Request was
    received but processing of the operation is still ongoing (e.g. asynchronous
    processing).


    And here are the main error categories returned (non-exhaustive list):

    - **409 Conflict.** Conflicting operation, for instance due to concurrent
    long action or locked resource.

    - **422 Unprocessable Entity - FREQUENT business functional failure.**
    Unprocessable request, mostly due to business context.

    - **424 Failed Dependency - FREQUENT business functional failure.** Business
    functional rejection from an external party downstream.

    - **502 Bad Gateway.** Communication error in an external party downstream.

    - **504 Gateway Timeout.** External party timeout error.
host: your-host-name
schemes:
  - https
produces:
  - application/vnd.amadeus+json
consumes:
  - application/vnd.amadeus+json
paths:
  /authorizations/{id}:
    put:
      summary: ''
      operationId: put-authorizations
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/AuthorizationResponse'
          headers:
            location:
              type: string
              description: A link to the newly created resource.
          examples:
            Successful Response:
              data:
                id: '{authorizationId}'
                method: CARD
                card:
                  vendorCode: VI
                  maskedCardNumber: 400000------0001
                approvalCode: APPROVAL_CODE
                externalId: externalReference
                timestamp: '2022-11-28T13:37:00Z'
        '400':
          $ref: '#/responses/error-response-400'
        '401':
          $ref: '#/responses/error-response-401'
        '403':
          $ref: '#/responses/error-response-403'
        '409':
          $ref: '#/responses/error-response-409'
        '422':
          $ref: '#/responses/error-response-422'
        '424':
          $ref: '#/responses/error-response-424'
        '500':
          $ref: '#/responses/error-response-500'
      description: >-
        This endpoint initiates an authorization operation.


        # Examples of scenarios

        ## Basic Card Authorization

        This is basic authorization scenario where card information is provided
        to perform a successful authorization. This data is the minimum amount
        of data Outpayce will always send as part of an authorization request.


        ## Authorization with additional data

        This is an authorization request that includes details related to the
        merchant account or acquirer information. If these details are provided,
        they will always be included in the payload of the request.


        ## Authorization with 3DSv2 Data

        This is an authorization request populated with 3DSv2 authentication
        details.


        ## Authorization with Travel Segment data

        This is an authorization request populated with flight and pasenger
        details.


        ## Authorization with Installment data

        This is an authorization request populated with  Installment data.


        ## Authorization request with Card on File Capabilities

        ### Initial Storing request of CC details

        This is an authorization scenario where the cardholder initiates the
        transaction. On top of setting the _transactionInitiator_ as 'HOLDER',
        the API consumer also indicates the _instrumentFilingRequest_ of
        'STORING'.


        ### Cardholder Initiated Transaction with Card on File

        This is an authorization scenario where the cardholder initiates the
        transaction using stored credentials. On top of setting the
        _transactionInitiator_ as 'HOLDER', the API consumer also indicates the
        _instrumentFilingRequest_ of 'REUSE'.


        ### Merchant Initiated Transaction

        This is an authorization scenario where the merchant initiates the
        transaction, on behalf of the cardholder. In that case, on top of
        setting the _transactionInitiator_ as 'MERCHANT', this time the API
        consumer also indicates the _instrumentFilingRequest_ of 'REUSE'.


        ### Request Examples

        ### Basic Card Authorization Request

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12"
            }
          }
        }

        ```


        ### Authorization with additional data

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "pointOfInteraction": {
              "operatingEnvironment": {
                "holderInteractionMode": "ECOMMERCE"
              }
            },
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "holderName": "Card Holder Name",
              "expiryDate": "2024-12"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              }
            }
          }
        }

        ```

        ### Authorization with 3DSv2 data

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "holderName": "Card Holder Name",
              "expiryDate": "2024-12"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              },
              "threeDomainSecure": {
                "eci": "05",
                "cavv": "AJkBAWUDOQAAABu8l4F5dQAAAAB=",
                "transStatus": "Y",
                "version": "2.2.0",
                "dsTransactionId": "e9bed923-7dbe-4e03-9886-1c4c3bba4934"
              }
            }
          }
        }

        ```


        ### Authorization with Travel Segment Data

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
          {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12",
              "holderName": "Card Holder Name"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              }
            },
            "purposeOfOperation": {
              "sales": [
                {
                  "reference": "SHFICC",
                  "referenceType": "PNR",
                  "referenceOwner": "1A",
                  "salesItems": [
                    {
                      "category": "FLIGHT",
                      "flightSalesDetails": {
                        "flightLegs": [
                          {
                            "fareBasisCode": "XLBCRTFR",
                            "departureAirportCode": "MEL",
                            "departureTime": "2023-05-11T19:55:00Z",
                            "arrivalAirportCode": "BKK",
                            "arrivalTime": "2023-05-12T09:00:00Z",
                            "carrierCode": "QH",
                            "couponNumber": "1",
                            "flightNumber": "700",
                            "serviceClass": "X"
                          },
                          {
                            "fareBasisCode": "XLBCRTFR",
                            "departureAirportCode": "BKK",
                            "departureTime": "2022-05-22T22:10:00Z",
                            "arrivalAirportCode": "MEL",
                            "arrivalTime": "2022-05-23T07:30:00Z",
                            "carrierCode": "QH",
                            "couponNumber": "1",
                            "flightNumber": "701",
                            "serviceClass": "V"
                          }
                        ],
                        "issuingCarrierCode": "BA",
                        "issuingCarrierCode": "BA",
                        "travelAgencyName": "BRITISH AIRWAYS TRAVEL SHOP",
                        "travelAgencyCode": "91492693",
                        "passenger": {
                          "flightPassengerType": "ADULT",
                          "name": {
                            "firstName": "JOHN",
                            "lastName": "DOE"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }

        ```

        ### Authorization with Installment Data

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
          {
          "data": {
            "id": "{authorizationId}",
            "card": {
              "cvv": "999",
              "vendorCode": "VI",
              "expiryDate": "2026-06",
              "cardNumber": "4400009999990004"
            },
            "method": "CARD",
            "timestamp": "2024-08-06T06:47:38Z",
            "authorizationType": "AUTHORIZATION_ONLY",
            "operationContext": {
              "acquirerInformation": {
                "acquirerCountry": "FR",
                "acquirerBin": "ProviderApiTest01"
              },
              "termsAndConditions": {
                "installments": {
                  "firstInstallmentAmount": {
                    "value": "430.55",
                    "currencyCode": "BRL"
                  },
                  "interestAmount": {
                    "value": "30.00",
                    "currencyCode": "BRL"
                  },
                  "subsequentInstallmentAmount": {
                    "value": "50.00",
                    "currencyCode": "BRL"
                  },
                  "maxNumber": 3,
                  "period": {
                    "frequencyType": "MONTHLY"
                  }
                }
              },
              "merchantAccount": {
                "name": "1234"
              }
            },
            "amount": {
              "value": "500.55",
              "currencyCode": "BRL"
            }
          }
        }

        ```

        ### Authorization with Card On File Capabilities

        #### Card on File Initial Request to store CC details

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12",
              "holderName": "Card Holder Name"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              },
              "transactionInitiator": "HOLDER",
              "termsAndConditions": {
                "credentialsOnFile": {
                  "instrumentFilingRequest": "STORING"
                }
              }
            }
          }
        }

        ```


        #### Cardholder Initiated Transaction with Card on File


        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHOR_AND_CAPTURE",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12",
              "holderName": "Card Holder Name"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              },
              "transactionInitiator": "HOLDER",
              "termsAndConditions": {
                "credentialsOnFile": {
                  "instrumentFilingRequest": "REUSE"
                }
              },
              "transactionIntent": "REUSABLE",
              "interactionCondition": "PHONE_ORDER"
            }
          }
        }

        ```


        #### Merchant Initiated Transaction with Card on File

        ```
          PUT https://{your-host-name}/outpayce/v1/authorizations/{authorizationId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "id": "{authorizationId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "authorizationType": "AUTHORIZATION_ONLY",
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "cvv": "123",
              "expiryDate": "2024-12",
              "holderName": "Card Holder Name"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              },
              "transactionInitiator": "MERCHANT",
              "termsAndConditions": {
                "credentialsOnFile": {
                  "instrumentFilingRequest": "REUSE",
                  "reuseProof": {
                            "traceReference": "123abc"
                  }
                }
              },
              "transactionIntent": "REUSABLE",
              "interactionCondition": "ON_FILE"
            }
          }
        }

        ```
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/AuthorizationPayload'
      tags:
        - Acceptance
    parameters:
      - type: string
        name: id
        in: path
        required: true
  /reversals/{id}:
    put:
      summary: ''
      operationId: put-reversals-id
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ReversalPayload'
          examples:
            Successful Response:
              data:
                parentOperationId: '{authorizationId}'
                id: '{reversalId}'
                method: CARD
                card:
                  vendorCode: VI
                  maskedCardNumber: 400000------0001
                approvalCode: APPROVAL_CODE
                timestamp: '2022-11-28T13:37:00Z'
        '400':
          $ref: '#/responses/error-response-400'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
        '403':
          $ref: '#/responses/error-response-403'
        '409':
          $ref: '#/responses/error-response-409'
        '422':
          $ref: '#/responses/error-response-422'
        '424':
          $ref: '#/responses/error-response-424'
        '500':
          $ref: '#/responses/error-response-500'
      description: |-
        This endpoints initiates a reversal operation.

        ## Examples of Reversal scenarios
        ### Reversal simple request
        ```
          PUT https://{your-host-name}/outpayce/v1/reversals/{reversalId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "parentOperationId": "{authorizationId}",
            "id": "{reversalId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            }
          }
        }
        ```

        ### Reversal request with optional data
        ```
          PUT https://{your-host-name}/outpayce/v1/reversals/{reversalId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
        {
          "data": {
            "parentOperationId": "{authorizationId}",
            "id": "{reversalId}",
            "amount": {
              "value": "123.45",
              "currencyCode": "EUR"
            },
            "method": "CARD",
            "card": {
              "vendorCode": "VI",
              "cardNumber": "4000000000000001",
              "expiryDate": "2024-12"
            },
            "operationContext": {
              "merchantAccount": {
                "name": "MERCHANT_ACCOUNT",
                "login": "merchantLogin",
                "password": {
                  "payload": "merchantPasword"
                }
              },
              "acquirerInformation": {
                "acquirerBin": "ACQUIRER_BIN",
                "acquirerCountry": "acquirerCountry"
              }
            },
            "approvalCode": "APPROVAL_CODE",
            "timestamp": "2022-11-28T13:37:00Z"
          }
        }
        ```
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ReversalPayload'
      tags:
        - Acceptance
    parameters:
      - type: string
        name: id
        in: path
        required: true
  /captures/{id}:
    put:
      summary: ''
      operationId: put-captures-id
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/CaptureResponse'
          examples:
            Successful Response:
              data:
                parentOperationId: '{authorizationId}'
                id: '{captureId}'
                method: CARD
                amount:
                  value: '123.45'
                  currencyCode: EUR
                status: RECEIVED
                timestamp: '2022-11-28T15:18:00Z'
        '400':
          $ref: '#/responses/error-response-400'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
        '403':
          $ref: '#/responses/error-response-403'
        '409':
          $ref: '#/responses/error-response-409'
        '422':
          $ref: '#/responses/error-response-422'
        '424':
          $ref: '#/responses/error-response-424'
        '500':
          $ref: '#/responses/error-response-500'
      description: "This endpoint initiates a capture operation.\n\n## Example of a Capture scenario\n ```\n  PUT https://{your-host-name}/outpayce/v1/captures/{captureId} HTTP/1.1\n  Content-Type: application/vnd.amadeus+json\n  ... \n {\n \t\"data\": {\n \t\t\"parentOperationId\": \"{authorizationId}\",\n \t\t\"id\": \"{captureId}\",\n \t\t\"amount\": {\n \t\t\t\"value\": \"123.45\",\n \t\t\t\"currencyCode\": \"EUR\"\n \t\t},\n \t\t\"method\": \"CARD\",\n \t\t\"card\": {\n \t\t\t\"vendorCode\": \"VI\",\n \t\t\t\"cardNumber\": \"4000000000000001\",\n \t\t\t\"expiryDate\": \"2024-12\",\n \t\t\t\"holderName\": \"Card Holder Name\"\n \t\t},\n \t\t\"approvalCode\": \"APPROVAL_CODE\",\n \t\t\"timestamp\": \"2022-11-28T13:37:00Z\",\n \t\t\"operationContext\": {\n \t\t\t\"merchantAccount\": {\n \t\t\t\t\"name\": \"MERCHANT_ACCOUNT\",\n \t\t\t\t\"login\": \"merchantLogin\",\n \t\t\t\t\"password\": {\n \t\t\t\t\t\"payload\": \"merchantPasword\"\n \t\t\t\t}\n \t\t\t},\n \t\t\t\"acquirerInformation\": {\n \t\t\t\t\"acquirerBin\": \"ACQUIRER_BIN\",\n \t\t\t\t\"acquirerCountry\": \"acquirerCountry\"\n \t\t\t},\n \t\t\t\"links\": [\n \t\t\t\t{\n \t\t\t\t\t\"rel\": \"webhook\",\n \t\t\t\t\t\"href\": \"https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/captures/ae2db239-57a5-434c-b77c-29d6776a2bfa/events\"\n \t\t\t\t}\n \t\t\t]\n \t\t},\n \t\t\"purposeOfOperation\": {\n \t\t\t\"sales\": [\n \t\t\t\t{\n \t\t\t\t\t\"salesItems\": [\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t\"category\": \"FLIGHT\",\n \t\t\t\t\t\t\t\"flightSalesDetails\": {\n \t\t\t\t\t\t\t\t\"passenger\": {\n \t\t\t\t\t\t\t\t\t\"name\": {\n \t\t\t\t\t\t\t\t\t\t\"firstName\": \"JOHN\",\n \t\t\t\t\t\t\t\t\t\t\"lastName\": \"DOE\"\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t\"flightLegs\": [\n \t\t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\t\t\"departureAirportCode\": \"CDG\",\n \t\t\t\t\t\t\t\t\t\t\"travelDate\": \"2024-01-09\",\n \t\t\t\t\t\t\t\t\t\t\"departureTime\": \"2024-01-09T18:15:00Z\",\n \t\t\t\t\t\t\t\t\t\t\"carrierCode\": \"6X\",\n \t\t\t\t\t\t\t\t\t\t\"flightNumber\": \"3847\",\n \t\t\t\t\t\t\t\t\t\t\"serviceClass\": \"B\",\n \t\t\t\t\t\t\t\t\t\t\"arrivalTime\": \"2024-01-09T19:45:00Z\",\n \t\t\t\t\t\t\t\t\t\t\"couponNumber\": \"194725\",\n \t\t\t\t\t\t\t\t\t\t\"arrivalAirportCode\": \"NCE\"\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t],\n \t\t\t\t\t\t\t\t\"ticketNumber\": \"1469380571\"\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t],\n \t\t\t\t\t\"referenceOwner\": \"1A\",\n \t\t\t\t\t\"reference\": \"RECLOC\",\n \t\t\t\t\t\"referenceType\": \"PNR\"\n \t\t\t\t}\n \t\t\t]\n \t\t}\n \t}\n }\n```"
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CapturePayload'
      tags:
        - Clearing
    parameters:
      - type: string
        name: id
        in: path
        required: true
  /refunds/{id}:
    put:
      summary: ''
      operationId: put-refunds-id
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/RefundResponse'
          examples:
            Successful Response:
              data:
                parentOperationId: '{authorizationId}'
                id: '{refundId}'
                method: CARD
                amount:
                  value: '123.45'
                  currencyCode: EUR
                status: RECEIVED
                timestamp: '2022-11-28T15:18:00Z'
        '400':
          $ref: '#/responses/error-response-400'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
        '403':
          $ref: '#/responses/error-response-403'
        '422':
          $ref: '#/responses/error-response-422'
        '424':
          $ref: '#/responses/error-response-424'
        '500':
          $ref: '#/responses/error-response-500'
        '502':
          $ref: '#/responses/error-response-502'
      description: |-
        This endpoint initiates a refund operation.

        ## Example of a Refund scenario
         ```
          PUT https://{your-host-name}/outpayce/v1/refunds/{refundId} HTTP/1.1
          Content-Type: application/vnd.amadeus+json
          ...
           {
                  "data": {
                    "parentOperationId": "{authorizationId}",
                    "id": "{refundId}",
                    "amount": {
                      "value": "123.45",
                      "currencyCode": "EUR"
                    },
                    "method": "CARD",
                    "card": {
                      "vendorCode": "VI",
                      "cardNumber": "4000000000000001",
                      "expiryDate": "2024-12"
                    },
                    "timestamp": "2022-11-28T13:37:00Z",
                    "operationContext": {
                      "merchantAccount": {
                        "name": "MERCHANT_ACCOUNT",
                        "login": "merchantLogin",
                        "password": {
                          "payload": "merchantPasword"
                        }
                      },
                      "acquirerInformation": {
                        "acquirerBin": "ACQUIRER_BIN",
                        "acquirerCountry": "acquirerCountry"
                      },
                      "links": [
                          {
                            "rel": "webhook",
                            "href": "https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/refunds/ae2db239-57a5-434c-b77c-29d6776a2bfa/events"
                          }
                      ]
                    },
                    "purposeOfOperation": {
                            "sales": [{
                                "salesItems": [{
                                    "flightSalesDetails": {
                                        "ticketNumber": "1250123456789",
                                    }
                                },
                                {
                                  "flightSalesDetails": {
                                        "ticketNumber": "4352123456789",
                                    }
                                }
                              ]
                            }
                        ]
                    }
                  }
           }
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RefundPayload'
      tags:
        - Clearing
    parameters:
      - type: string
        name: id
        in: path
        required: true
definitions:
  AuthorizationPayload:
    title: Authorization Payload
    type: object
    example:
      data:
        id: '{authorizationId}'
        amount:
          value: '123.45'
          currencyCode: EUR
        authorizationType: AUTHORIZATION_ONLY
        method: CARD
        pointOfInteraction:
          operatingEnvironment:
            holderInteractionMode: ECOMMERCE
        card:
          vendorCode: VI
          cardNumber: '4000000000000001'
          cvv: '123'
          expiryDate: 2024-12
        operationContext:
          merchantAccount:
            name: '{merchant-account}'
            login: '{merchantLogin}'
            password:
              payload: '{merchantPasword}'
          acquirerInformation:
            acquirerBin: '{acquirer-bin}'
            acquirerCountry: '{acquirerCountry}'
        purposeOfOperation:
          sales:
            - reference: NYWSMG
              referenceType: PNR
              salesItems:
                - category: FLIGHT
                  flightSalesDetails:
                    flightLegs:
                      - fareBasisCode: '{fare-code}'
                        departureAirportCode: MEL
                        departureTime: '2023-01-24T16:50:00Z'
                        arrivalAirportCode: BKK
                        arrivalTime: '2023-01-24T20:15:00Z'
                        carrierCode: QH
                        couponNumber: '1'
                        flightNumber: '1661'
                        serviceClass: V
                    issuingCarrierCode: BA
                    travelAgencyName: BRITISH AIRWAYS TRAVEL SHOP
                    travelAgencyCode: '91492693'
                    passenger:
                      name:
                        firstName: JOHN
                        lastName: DOE
                      flightPassengerType: ADULT
    properties:
      data:
        $ref: '#/definitions/Authorization'
  ReversalPayload:
    title: Reversal Payload
    type: object
    example:
      data:
        parentOperationId: '{authorizationId}'
        id: '{reversalId}'
        amount:
          value: '123.45'
          currencyCode: EUR
        method: CARD
        card:
          vendorCode: VI
          cardNumber: '4000000000000001'
          expiryDate: 2024-12
        approvalCode: '12345678'
        operationContext:
          merchantAccount:
            name: '{merchant-account}'
            password:
              payload: '{merchantPasword}'
            login: '{merchantLogin}'
          acquirerInformation:
            acquirerBin: '{acquirer-bin}'
            acquirerCountry: '{acquirerCountry}'
    properties:
      data:
        $ref: '#/definitions/Reversal'
  CapturePayload:
    title: Capture Payload
    type: object
    example:
      data:
        parentOperationId: '{authorizationId}'
        id: '{captureId}'
        amount:
          value: '123.45'
          currencyCode: EUR
        method: CARD
        card:
          vendorCode: VI
          cardNumber: '4000000000000001'
          expiryDate: 2024-12
        approvalCode: '12345678'
        operationContext:
          merchantAccount:
            name: '{merchant-account}'
            password:
              payload: '{merchantPasword}'
            login: '{merchantLogin}'
          acquirerInformation:
            acquirerBin: '{acquirer-bin}'
            acquirerCountry: '{acquirerCountry}'
          links:
            - rel: webhook
              href: >-
                https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/captures/ae2db239-57a5-434c-b77c-29d6776a2bfa/events
        timestamp: '2022-11-28T13:37:00Z'
        purposeOfOperation:
          sales:
            - reference: NYWSMG
              referenceType: PNR
              referenceOWner: 1A
              salesItems:
                - category: FLIGHT
                  flightSalesDetails:
                    ticketNumber: '1469380571'
                    flightLegs:
                      - fareBasisCode: '{fare-code}'
                        departureAirportCode: MEL
                        departureTime: '2023-01-24T16:50:00Z'
                        arrivalAirportCode: BKK
                        arrivalTime: '2023-01-24T20:15:00Z'
                        carrierCode: QH
                        couponNumber: '1'
                        flightNumber: '1661'
                        serviceClass: V
                    travelAgencyName: BRITISH AIRWAYS TRAVEL SHOP
                    travelAgencyCode: '91492693'
                    passenger:
                      name:
                        firstName: JOHN
                        lastName: DOE
                      flightPassengerType: ADULT
    properties:
      data:
        $ref: '#/definitions/Capture'
  RefundPayload:
    title: Refund Payload
    type: object
    properties:
      data:
        $ref: '#/definitions/Refund'
    example:
      data:
        parentOperationId: '{authorizationId}'
        id: '{refundId}'
        amount:
          value: '123.45'
          currencyCode: EUR
        method: CARD
        card:
          vendorCode: VI
          cardNumber: '4000000000000001'
          expiryDate: 2024-12
        timestamp: '2022-11-28T13:37:00Z'
        operationContext:
          merchantAccount:
            name: '{merchant-account}'
            login: '{merchantLogin}'
            password:
              payload: '{merchantPasword}'
          acquirerInformation:
            acquirerBin: '{acquirer-bin}'
            acquirerCountry: '{acquirerCountry}'
          links:
            - rel: webhook
              href: >-
                https://{third-party}.payment.feeds.outpayce.com/{attributed-sap}/SPWREQ/v1/payment/3rd-party-gateway/{third-party}/captures/ae2db239-57a5-434c-b77c-29d6776a2bfa/events
        purposeOfOperation:
          sales:
            - salesItems:
                - flightSalesDetails:
                    ticketNumber: '{1250123456789}'
                - flightSalesDetails:
                    ticketNumber: '{4352123456789}'
  Authorization:
    title: Operation Authorization
    allOf:
      - $ref: '#/definitions/Operation'
      - type: object
        properties:
          amount:
            $ref: '#/definitions/Amount'
          card:
            $ref: '#/definitions/Card'
          approvalCode:
            type: string
            description: >-
              Authorization approval code acting as primary proof of
              availability of funds that can be used by the payee in order to
              request a capture of those funds to their bank. Mandatory for
              Credit Card transactions.
            minLength: 6
            maxLength: 8
          authorizationType:
            type: string
            description: |-
              "AUTHORIZATION_ONLY" or "AUTHOR_AND_CAPTURE".
              Indicates how the settlement is triggered:
               - If AUTHORIZATION_ONLY, then the clearing of the authorization needs to be triggered via its dedicated operation, i.e. Capture.
                - If AUTHOR_AND_CAPTURE, then the clearing and settlement is triggered automatically.
            enum:
              - AUTHORIZATION_ONLY
              - AUTHOR_AND_CAPTURE
          schemeTransactionId:
            type: string
            description: Identifier of the payment transaction in the card scheme system.
          pspReconciliationReference:
            type: string
            description: >-
              Authorization PSP reference provided for reconciliation purpose
              (also identified as _PRR_ in other Amadeus payment applications).
              This reference is generated by the payee in order to reconciliate
              the payment settlement against the sales.
  AuthorizationResponse:
    title: Authorization Response
    example:
      data:
        id: '{authorizationId}'
        method: CARD
        card:
          vendorCode: VI
          maskedCardNumber: 400000------0001
        approvalCode: '12345678'
        externalId: externalReference
        schemeTransactionId: '987654321234567'
        timestamp: '2022-11-28T13:37:00Z'
    properties:
      data:
        type: object
        allOf:
          - $ref: '#/definitions/Authorization'
  Reversal:
    title: Operation_Reversal
    allOf:
      - $ref: '#/definitions/Operation'
      - type: object
        properties:
          amount:
            $ref: '#/definitions/Amount'
          approvalCode:
            type: string
            minLength: 6
            maxLength: 8
            description: >-
              Authorization approval code acting as primary proof of
              availability of funds that can be used by the payee in order to
              request a capture of those funds to their bank.
          card:
            $ref: '#/definitions/Card'
          pspReconciliationReference:
            type: string
            description: >-
              Authorization PSP reference provided for reconciliation purpose
              (also identified as _PRR_ in other Amadeus payment applications).
              This reference is generated by the payee in order to reconciliate
              the payment settlement against the sales.
  Capture:
    title: Operation Capture
    allOf:
      - $ref: '#/definitions/Operation'
      - type: object
        properties:
          amount:
            $ref: '#/definitions/Amount'
          card:
            $ref: '#/definitions/Card'
          approvalCode:
            type: string
            description: >-
              Authorization approval code acting as primary proof of
              availability of funds that can be used by the payee in order to
              request a capture of those funds to their bank.
            minLength: 6
            maxLength: 8
          pspReconciliationReference:
            type: string
            description: >-
              Authorization PSP reference provided for reconciliation purpose
              (also identified as _PRR_ in other Amadeus payment applications).
              This reference is generated by the payee in order to reconciliate
              the payment settlement against the sales.
  CaptureResponse:
    title: Capture Response
    example:
      data:
        parentOperationId: '{authorizationId}'
        id: '{captureId}'
        method: CARD
        amount:
          value: '123.45'
          currencyCode: EUR
        status: RECEIVED
        timestamp: '2022-11-28T13:37:00Z'
    properties:
      data:
        type: object
        allOf:
          - $ref: '#/definitions/Capture'
  Refund:
    title: Operation Refund
    allOf:
      - $ref: '#/definitions/Operation'
      - type: object
        properties:
          amount:
            $ref: '#/definitions/Amount'
          card:
            $ref: '#/definitions/Card'
          pspReconciliationReference:
            type: string
            description: >-
              Authorization PSP reference provided for reconciliation purpose
              (also identified as _PRR_ in other Amadeus payment applications).
              This reference is generated by the payee in order to reconciliate
              the payment settlement against the sales.
  RefundResponse:
    title: Refund Response
    example:
      data:
        parentOperationId: '{authorizationId}'
        id: '{refundId}'
        method: CARD
        amount:
          value: '123.45'
          currencyCode: EUR
        status: RECEIVED
        timestamp: '2022-11-28T13:37:00Z'
    properties:
      data:
        type: object
        allOf:
          - $ref: '#/definitions/Refund'
  Operation:
    title: Operation
    type: object
    description: >-
      An *Operation* is either a payment operation implying or not a direct move
      of funds between a payer and a payee. An *Operation* is therefore an
      abstract resource that may be one of the following: *Authorization*,
      *Reversal*, *Capture*, *Refund*.
    properties:
      id:
        type: string
        description: >-
          Amadeus Operation identifier.

          This identifier is generated by Amadeus Payment Platform and uniquely
          represents this operation.
      parentOperationId:
        type: string
        description: Identifier of a previous operation belonging to the same payment.
      externalId:
        type: string
        description: >-
          Identifier of the operation generated by the service host. Can be
          populated in the transaction response containing a specific operation
          identifier.
      method:
        type: string
        description: >
          "CARD". It drives information requested at authorization time.

          - If CARD, then card information is provided if the operation is
          payment related.
      purposeOfOperation:
        $ref: '#/definitions/OperationPurposeOfOperation'
      pointOfInteraction:
        $ref: '#/definitions/OperationPointOfInteraction'
      status:
        type: string
        description: >-
          Operation status. For CARD method of payment, this value must be
          "RECEIVED" and must be present in CAPTURE & REFUND Operation
          responses. Otherwise Outpayce System will not be able to process the
          transaction.
      timestamp:
        type: string
        description: Datetime of the operation.
        format: date-time
      operationContext:
        $ref: '#/definitions/OperationOperationContext'
  Amount:
    title: Operation Amount
    description: Operation amount
    type: object
    properties:
      value:
        type: string
        description: The value of the amount.
      currencyCode:
        type: string
        description: >-
          Indicate the currency of the provided amount (following [ISO
          4217](https://en.wikipedia.org/wiki/ISO_4217)).
        minLength: 3
        maxLength: 3
  Card:
    title: Card
    type: object
    description: The payment card is a particular payment instrument.
    properties:
      vendorCode:
        type: string
        description: >
          Upper case key representing the brand of the payment card chosen by
          the payer to process that payment transaction out of that
          non-exhaustive list:

          - "VI" for VisaÂ® (usually card starting with 4xxx),

          - "CA" for MastercardÂ® (usually card starting with 5xxx, 6xxx or
          2xxx),

          - "AX" for American ExpressÂ® (usually card starting with 34xxx or
          37xxx),

          - "DC" or "DS" for Diners ClubÂ®/DiscoverÂ® (usually card starting with
          64xxx or 65xxx),

          - "JC" for JCBÂ® (Japan Credit Bureau) (usually card starting with
          35xxx),

          - "UP" for UnionPayÂ® (usually car starting with 62xxx),

          - "TP" for UATPÂ® (usually card starting with 1xxx)...

          Prerequisite is of course that this brand is already contractually
          made available on behalf of the payee. For a more complete list of
          card brands (AuraÂ®, CBÂ®, eloÂ®, HipercardÂ®, MaestroÂ®, madaÂ®...), please
          liaise with your Business Contact.
        minLength: 2
        maxLength: 2
      holderName:
        type: string
        description: Card holder fullname registered against that payment card.
      expiryDate:
        type: string
        description: >-
          Card expiry date, when present, displayed on the front of the payment
          card. Format expected is *YYYY-MM*.
        minLength: 7
        maxLength: 7
        pattern: 20[0-9]{2}-(0[1-9]|10|11|12)
      cvv:
        type: string
        description: >-
          Card Verification Value, also known as [card security
          code](https://en.wikipedia.org/wiki/Card_security_code), displayed
          (usually) on the back of the payment card. Handling of this very
          sensitive information must comply with
          [PCI-DSS](https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard).
        minLength: 3
        maxLength: 4
      tokenizedCardNumber:
        type: string
        description: >-
          Token representing the payment card of the payer, compliant with
          [PCI-DSS](https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard)
          scope reduction tokenization principles. This information being
          sensitive, as for the cardNumber field itseld, please do not expect
          this information to be returned by default.
      maskedCardNumber:
        type: string
        description: >-
          Masked payment card number, following recommandations of
          [PCI-DSS](https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard).
          This information will usually be returned for information purpose, for
          instance it can be displayed or printed in some payment receipt.
      cardNumber:
        type: string
        description: >-
          Payment card number, also known as PAN, or [primary account
          number](https://en.wikipedia.org/wiki/Payment_card_number), displayed
          (usually) on the front of the payment card. Handling of this very
          sensitive information must comply with
          [PCI-DSS](https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard).
          This information will usually not be returned as is, but masked.
      holder:
        $ref: '#/definitions/Holder'
  Holder:
    title: Payment Instrument Holder
    type: object
    description: Describe the holder of the payment instrument.
    properties:
      language:
        type: string
        description: >-
          Indicate the payment-instrument holder's language, lower case alpha-2
          code is expected (following [ISO
          639](https://en.wikipedia.org/wiki/ISO_639), eg. "en" for English).
      email:
        type: string
        description: >-
          Indicate the payment-instrument holder's email address ([RFC
          5322](https://tools.ietf.org/html/rfc5322)), please note that length
          beyond 70 characters and internationalization are not yet supported
          ([RFC 6530](https://tools.ietf.org/html/rfc6530)).
      billingAddress:
        title: billingAddress
        type: object
        description: >-
          Indicate the payment-instrument holder's postal address, please
          standardize your input following recommendation from
          [UPU](http://www.upu.int) international interoperability standard (for
          instance, try to stick to non accented roman upper case characters,
          use standard abbreviations,...).
        properties:
          countryCode:
            type: string
            minLength: 2
            maxLength: 2
            description: >-
              Indicate the payment-instrument holder's country, upper case
              alpha-2 code is expected (following [ISO
              3166](https://en.wikipedia.org/wiki/ISO_3166), eg. "AD" for
              Andorra).
          cityName:
            type: string
            description: >-
              Indicate the payment-instrument holder's city name, up to 35
              characters.
          postalCode:
            type: string
            description: >-
              Indicate the payment-instrument holder's postal code, up to 10
              characters.
      contacts:
        type: object
        description: >-
          A contact refers to the information that can be used to reach a
          person, a company or an organization.
        title: Contact
        x-examples:
          Several contacts for different Purpose:
            contacts:
              - email:
                  address: business@test.com
                  category: BUSINESS
                purpose: NOTIFICATION
              - email:
                  address: personal@test.com
                  category: PERSONAL
                purpose: STANDARD
              - phone:
                  number: '231366119911'
                purpose: STANDARD
        x-tags:
          - contact
          - phone
          - email
          - address
          - message
          - PII
        properties:
          phone:
            type: object
            description: Phone information.
            title: Phone
            x-tags:
              - phone
              - contact
              - address
              - PII
            properties:
              text:
                type: string
                description: >-
                  String containing the full phone number - applicable only when
                  a structured phone (i.e. countryCallingCode + number) is not
                  provided
                example: (+33)6123123
                x-risk-personal-data-field: PHONE_NUMBER
      name:
        title: name
        type: object
        properties:
          lastName:
            type: string
          firstName:
            type: string
  OperationPurposeOfOperation:
    title: Operation Purpose of Payment Operation
    type: object
    description: Purpose of the payment operation (sales, donation,...)
    properties:
      sales:
        type: array
        items:
          $ref: '#/definitions/OperationSalesSummary'
  OperationSalesSummary:
    title: Operation Sales
    description: >-
      Sales summary information, should itemized information be also necessary,
      then this level of detail will be transported by composition of
      SalesSummaryItem instances.
    type: object
    properties:
      reference:
        type: string
        description: Reference identifying the sales.
      referenceType:
        type: string
        description: Type of reference identifying the sales.
      referenceOwner:
        type: string
        description: Owner of the reference type.
      salesItems:
        type: array
        description: Sales items information.
        items:
          $ref: '#/definitions/OperationSalesSummaryItem'
  OperationSalesSummaryItem:
    title: Operation Sales Item
    type: object
    description: >-
      Sales summary itemized information, usually as a collection of children of
      a SalesSummary instance.
    properties:
      category:
        type: string
        description: Category best qualifying the sales item.
        enum:
          - FLIGHT
      flightSalesDetails:
        $ref: '#/definitions/OperationSalesItemFlightDetails'
  OperationSalesItemFlightDetails:
    title: Operation Sales Item Flight Details
    type: object
    description: Flight detailed item description as a sales summary item.
    properties:
      flightLegs:
        type: array
        items:
          $ref: '#/definitions/OperationSalesItemFlightLegDetails'
      issuingCarrierCode:
        type: string
        description: IATA code of the validating carrier.
      travelAgencyCode:
        type: string
        description: Code identifying the travel agency resposible for this sales..
      travelAgencyName:
        type: string
        description: Name of the travel agency resposible for this sales.
      passenger:
        type: object
        description: Passenger of the flight.
        properties:
          name:
            type: object
            description: Description of the name of a physical person
            properties:
              firstName:
                type: string
                description: First name.
              lastName:
                type: string
                description: Last name.
          flightPassengerType:
            type: string
            description: Specifies flight passenger type
            enum:
              - ADULT
              - CHILD
              - INFANT
              - INFANT_WITH_SEAT
            example: ADULT
      ticketNumber:
        type: string
        description: Ticket number of the flight. Not present at Authorization time.
  OperationSalesItemFlightLegDetails:
    title: Operation Sales Item Flight Leg Details
    type: object
    description: >-
      Flight itinerary details associated to a given passenger as sales summary
      flight details at flight segment level.
    properties:
      fareBasisCode:
        type: string
        description: Airline fare basis code identifying a fare type.
      arrivalTime:
        type: string
        format: date-time
        description: UTC date and time of the scheduled arrival, compliant with ISO8601.
      arrivalAirportCode:
        type: string
        description: >-
          IATA 3-letter code representing the airport of arrival of that flight
          leg.
      departureTime:
        type: string
        format: date-time
        description: UTC date and time of the scheduled departure, compliant with ISO8601.
      departureAirportCode:
        type: string
        description: >-
          IATA 3-letter code representing the airport of departure of that
          flight leg.
      carrierCode:
        type: string
        description: IATA code of the carrier in charge of that flight segment.
      couponNumber:
        type: string
        description: Coupon number.
      flightNumber:
        type: string
        description: >-
          Flight number associated to the carrier in charge of that flight
          segment.
      serviceClass:
        type: string
        description: >-
          Reference identifying the class of travel and included services (with
          their conditions and benefits) sold.
      travelDate:
        type: string
        format: date
        description: Day when travel over that segment begins.
  OperationOperationContext:
    title: Operation Context
    type: object
    properties:
      links:
        type: array
        items:
          $ref: '#/definitions/OperationLink'
      threeDomainSecure:
        $ref: '#/definitions/OperationThreeDomainSecure'
      termsAndConditions:
        $ref: '#/definitions/OperationTermsAndConditions'
      interactionCondition:
        type: string
        description: >
          Main condition qualifying the interaction mechanism of the
          transaction.

          Here are the different interactions supported at the moment:

          - \"ACCOUNT_VERIFICATION\",

          - \"COMMIT_PREAUTHOR\" (commitment of a preauthorization),

          - \"ECOMMERCE\",

          - \"FACE_TO_FACE_PIN\",

          - \"FACE_TO_FACE_MANUAL\",

          - \"IN_FLIGHT\",

          - \"INQUIRY\",

          - \"OTHER_NOT_PRESENT\" (other Card Not Present interaction),

          - \"ON_FILE\",

          - \"PAPER_ORDER\",

          - \"PHONE_ORDER\",

          - \"PREAUTHORIZATION\" (preauthorizing still allows amount to vary),

          - \"RECURRING\",

          - \"MERCHANT_SUSPICIOUS\",

          - \"TIME_BASED\".
      transactionIntent:
        type: string
        description: >
          Provide the original intent of the (future) transaction(s).

          It is strongly recommended to communicate that intent of use for
          Merchant-initiated transactions, and even a mandate under some local
          regulations. Here are the different intents supported at the moment:

          - \"NO_PAYMENT\" (like account verification or inquiries),

          - \"PRE_PAYMENT_ONLY\" (implicitly meaning there is some remainder of
          payment to cover via some completion later on, e.g. a 10%
          downpayment),

          - \"ONE_OFF\" (default),

          - \"DEFERRED\" (due to some business rationales),

          - \"NO_SHOW_PENALTY\",

          - \"CANCELLATION_PENALTY\",

          - \"LATE_CHANGE_PENALTY\",

          - \"DEPOSIT_RETAINER_PENALTY\",

          - \"ANY_PENALTY\",

          - \"COMPLETION\" (of a pre-payment done earlier),

          - \"EXTENDED_PERIOD_DELAY\" (due to some specific business cases),

          - \"TECHNICAL_RESUBMISSION\",

          - \"INSTALLMENTS\" (with terms and plans agreed in advance),

          - \"SUBSCRIPTION\" (of fixed amount through regular schedule),

          - \"RECURRING\" (of variable amounts through regular schedule, e.g.
          utilities payment),

          - \"REUSABLE\" (at any time, of any amount, within payment instrument
          holder scope of consent of course).
      transactionInitiator:
        type: string
        default: HOLDER
        enum:
          - MERCHANT
          - HOLDER
        description: >-
          Indicate whether the transaction is a MERCHANT initiated transaction
          (_MIT_) or a payment instrument HOLDER initiated transaction (aka
          _CIT_ with _C_ standing for cardholder or consumer).
      acquirerInformation:
        $ref: '#/definitions/OperationAcquirerInformation'
      merchantAccount:
        $ref: '#/definitions/OperationMerchantAccount'
  OperationThreeDomainSecure:
    title: Operation Three Domain Secure
    type: object
    description: Operation 3-Domain Secure information.
    properties:
      collectionIndicator:
        type: string
        description: UCAF collection indicator value.
      aav:
        type: string
        description: UCAF Accountholder Authentication Value.
      aevv:
        type: string
        description: Base64-encoded American Express Verification Value.
      cavv:
        type: string
        description: Base64-encoded Cardholder Authentication Verification Value.
      eci:
        type: string
        description: Computed e-commerce indicator.
      transStatus:
        type: string
        description: 3-D Secure 2.x (or later) Final Authentication Result.
      dsTransactionId:
        type: string
        description: 3-D Secure 2.x (or later) Directory Server Transaction Identifier.
        format: uuid
      version:
        type: string
        description: 3-D Secure protocol version.
  OperationTermsAndConditions:
    title: Operation Terms And Conditions
    type: object
    properties:
      credentialsOnFile:
        $ref: '#/definitions/OperationCredentialsOnFile'
      installments:
        $ref: '#/definitions/OperationInstallmentDetails'
  OperationCredentialsOnFile:
    title: Record Credentials On File
    type: object
    properties:
      instrumentFilingRequest:
        type: string
        enum:
          - STORING
          - REUSE
        description: >-
          Indicate whether the transaction is the one where the credential are
          being stored for the first time or it is a subsequent follow up
          transaction that is performed using stored credentials.
      reuseProof:
        type: object
        properties:
          traceReference:
            type: string
            description: >-
              A reference of the trace of the consent for filing or original
              filing successful transaction.
  OperationInstallmentDetails:
    type: object
    title: OperationInstallmentDetails
    properties:
      maxNumber:
        type: integer
      period:
        $ref: '#/definitions/OperationPeriod'
      firstInstallmentAmount:
        $ref: '#/definitions/Amount'
      subsequentInstallmentAmount:
        $ref: '#/definitions/Amount'
      interestAmount:
        $ref: '#/definitions/Amount'
  OperationPeriod:
    type: object
    title: Operation Period
    description: >
      Models a period of time between two dates and inclusive only of the days
      of the week specified; for instance using the example:

      Mondays, Tuesdays, Saturdays and Sundays between 22nd Nov 2019 and 26th
      Dec 2019 are included

      Some parts of the period can excluded.
    properties:
      frequencyType:
        enum:
          - DAILY
          - MONTHLY
          - WEEKLY
        description: Frequency type
    minProperties: 1
    x-examples:
      Example:
        frequencyType: MONTHLY
    x-tags:
      - HotelIT
      - Hospitality
      - Period
  OperationAcquirerInformation:
    title: Operation_AcquirerInformation
    type: object
    description: Information related to the acquirer of a payment operation.
    properties:
      acquirerBin:
        type: string
        description: Acquirer Bank Identifier Number.
      acquirerCountry:
        type: string
        description: ISO 3166-1 country code of the acquirer.
        pattern: '[a-zA-Z]{2}'
  OperationMerchantAccount:
    title: Operation_MerchantAccount
    type: object
    description: Information related to the merchant of a payment operation.
    properties:
      name:
        type: string
        description: Name identifiying the merchant in the service host system.
      login:
        type: string
        description: >-
          Login of a user registered in the service host system and belonging to
          the merchant.
      password:
        $ref: '#/definitions/DocumentEnvelope'
  DocumentEnvelope:
    title: Payment Document Envelope
    type: object
    x-tags:
      - DocumentEnvelope
      - blob
      - blb
      - binary
      - document
      - compression
      - zip
      - attachment
    description: >-
      Data model to convey any kind of document, any format with associated meta
      data to help the identification and the decoding.
    x-examples:
      IATA Xml example:
        payload: ewogICAgIndhcm5pbmdzIjogW3sKICAgICAgICAgICAgImNvZGUiOiAiNjUyMjciLAo
        metaData:
          ianaContentType: xml
          name: Amadeus_Order_Change_example1
          documentType: XML
          grammarType: XSD
          grammarName: IATA_OrderChangeNotifRQ
          grammarVersion: '7.000'
          gammmarDomain: http://www.iata.org/IATA/2015/00/2018.2/IATA_OrderChangeNotifRQ
          grammarRelease: IATA2018.2
          encoding: BASE_64
    properties:
      payload:
        type: string
        description: >-
          This contains the payload of the document. It can either be raw data
          or encoded data in b6se4. see details in metaData block.
  ErrorResponse:
    title: Error Response
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
  Error:
    type: object
    description: The Error Definition
    title: Error
    properties:
      status:
        type: integer
        description: >-
          The [HTTP status
          code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
          of this response. This is present only in terminal errors which cause
          an unsuccessful response. In the case of multiple errors, they must
          all have the same status.
      code:
        type: integer
        description: >-
          A machine-readable error code from the Amadeus Canned Messages table,
          that will enable the API Consumers code to handle this type of error
      title:
        type: string
        description: >-
          An error title from the Canned Messages table with a 1:1
          correspondence to the error code. This may be localized
      detail:
        type: string
        description: >-
          An easy-to-read explanation specific to this occurrence of the
          problem. It should give the API consumer an idea of what went wrong
          and how to recover from it. Like the title, this fieldâ€™s value can be
          localized.
      source:
        type: object
        title: Error_Source
        properties:
          parameter:
            type: string
            description: The key of the URI path or query parameter that caused the error
          pointer:
            type: string
            description: >-
              A JSON Pointer [RFC6901] to the associated entity in the request
              body that caused this error
          example:
            type: string
            description: A sample input to guide the user when resolving this issue
    required:
      - code
      - title
  OperationLink:
    title: Operation Link
    type: object
    properties:
      rel:
        type: string
        description: >
          Relation of the link. In addition to [IANA standard
          relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml),
          payment area bears domain specific ones:

          - \"webhook\" to indicate where the API consumer is expected to update
          the status of a specific operation. Please refer to the Payment
          Operation Events API for more details.
      href:
        type: string
        description: Absolute or relative URL.
        format: uri
  OperationOperatingEnvironment:
    title: Operation Operating Environment
    type: object
    description: Operating Environment of a given Point of Interaction.
    properties:
      holderInteractionMode:
        type: string
        enum:
          - ECOMMERCE
          - FACE_TO_FACE
          - MAIL_ORDER
          - HOLDER_NOT_PRESENT
          - PHONE_ORDER
          - RECURRING
          - ON_FILE
        description: >-
          Primary mode of interaction with the payment instrument holder that
          this Point of Business provides.
  OperationPointOfInteraction:
    title: Operation Point Of Interaction
    type: object
    description: >-
      Characteristics and environmental information of a conceptually and
      individually identifiable point of business interaction leading to some
      operations.
    properties:
      operatingEnvironment:
        $ref: '#/definitions/OperationOperatingEnvironment'
basePath: /outpayce/v1
tags:
  - name: Operation
    description: |
      **CREATING A PAYMENT OR PAYMENT INSTRUMENT RELATED OPERATION**
  - name: Acceptance
    description: |
      **ESTABLISHING THE PAYMENT CONTRACT**
  - name: Clearing
    description: |
      **TRANSFERRING THE MONEY**
responses:
  error-response-400:
    description: >
      **400 Bad Request error.** Problem reading or understanding request
      (Usually missing data or invalid requests). Please find below an
      exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-

      33460  |   | MISSING REQUIRED INPUT PARAM(S) - PLEASE ADJUST REQUEST

      33459  |   | INVALID INPUT PARAM(S) - PLEASE ADJUST REQUEST
        477  |   | INVALID FORMAT

    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - status: 400
            code: 33460
            title: MISSING REQUIRED INPUT PARAM(S) - PLEASE ADJUST REQUEST
            details: merchant account name is missing from request
            source:
              parameter: '#data/operationContext/merchantAccount/name'
  error-response-403:
    description: >
      **403 Forbidden error.** Generic error linked to permission mismatch.
      Please find below a non-exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-
       1666  |   | NOT ALLOWED
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 1666
            title: NOT ALLOWED
  error-response-409:
    description: >
      **409 Conflict error.** Generic error linked to conflicting operation.
      Please find below a non-exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-

      33474  |   | PAYMENT TRANSACTION CANCELLED EXTERNALLY.

      25754  |   | REVERSAL ALREADY PERFORMED

      33477  |   | PAYMENT TRANSACTION ALREADY CANCELLED OR REFUNDED

      33478  |   | PAYMENT TRANSACTION ALREADY TOTALLY CANCELLED OR REFUNDED

      33479  |   | PAYMENT TRANSACTION EXPIRED.

      25888  |   | PARTIAL REVERSAL DISALLOWED

      33869  |   | PAYMENT REVERSAL DENIAL DUE TO CAPTURE PROCESSED

      39041  |   | DUPLICATE REQUEST ERROR
       9659  |   | CC REVERSAL HAS BEEN LOCKED FOR THIS CARD BY ISSUEING BANK
      33034  |   | OUT OF REFUND PERIOD

      33562  |   | PAYMENT PARTIAL REFUND NOT ALLOWED

      33548  |   | PAYMENT PARTIAL CAPTURE NOT ALLOWED
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 33474
            title: PAYMENT TRANSACTION CANCELLED EXTERNALLY.
  error-response-422:
    description: "**422 Unprocessable Entity error.** Generic error linked to unprocessable request. Please find below a non-exhaustive list of errors:\n\ncode   | - | title\n------:|:-:|:-\n   11  |   | \tUNABLE TO PROCESS\n 1304  |   |  CREDIT CARD NOT ACCEPTED\n"
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 1304
            title: CREDIT CARD NOT ACCEPTED
  error-response-424:
    description: >
      **424 Failed Dependency error.** Generic error linked to 3rd party
      functional rejection. Please find below a non-exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-
       4751  |   | INVALID CARD
      33480  |   | PAYMENT TRANSACTION DECLINED. SUSPECTED FRAUD

      12678  |   | CC SECURITY ID DOES NOT MATCH
       4223  |   | NAME MISMATCH
      12550  |   | AUTHORISATION DENIED INSUFFICIENT FUNDS

      34869  |   | CREDIT CARD DENIAL - INCORRECT PIN

      34477  |   | REVERSAL NOT PERFORMED

      33471  |   | PAYMENT ACTION DECLINED

      65222  |   | PAYMENT REQUIRES 3D SECURE
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 33471
            title: PAYMENT ACTION DECLINED
  error-response-500:
    description: >
      **500 Internal Server Error error.** Generic Amadeus internal error.
      Please find below a non-exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-
        974  |   | SYSTEM UNAVAILABLE
        414  |   | INTERNAL PROCESSING ERROR
       2894  |   | ERROR MESSAGE NOT FOUND
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 2894
            title: ERROR MESSAGE NOT FOUND
  error-response-502:
    description: >
      **502 Bad Gateway error.** Generic communication error downstream. Please
      find below a non-exhaustive list of errors:


      code   | - | title

      ------:|:-:|:-

      33457  |   | COMMUNICATION ERROR - PLEASE TRY AGAIN LATER
       5038  |   | TIMEOUT ERROR UNKNOWN
      31787  |   | ISSUER NOT AVAILABLE
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      application/vnd.amadeus+json:
        errors:
          - code: 31787
            title: ISSUER NOT AVAILABLE
  error-response:
    description: |
      **Standard error. This error may be used if no other errors apply.
      code   | - | title
      ------:|:-:|:-
        492  |   | ERROR
    schema:
      $ref: '#/definitions/ErrorResponse'
  error-response-401:
    description: |
      **Unauthorized**
    schema:
      $ref: '#/definitions/ErrorResponse'