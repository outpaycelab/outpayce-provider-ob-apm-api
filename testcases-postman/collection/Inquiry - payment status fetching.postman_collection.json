{
	"info": {
		"_postman_id": "f8f898b0-0842-4c31-9bde-fe87a523d364",
		"name": "Inquiry - payment status fetching",
		"description": "Inquiry is triggered upon receipt of FE calls with either an empty status or a signature mismatch. This inquiry process entails communication between 1A and the PSP for retrieving payment status.\n\nResumption URL: `https://your-host-name/outpayce/v1/authorizations/337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e/resumption`.\"\n\n**Mandatory fields:**\n\n<u>SPWREQ Request payload (BLB) to the PSP:<br></u>\n\nIn the SPWREQ, only the resumption URL is included in the SPW header segment,\n\nfor example: SPW+AMADEUS+/outpayce/v1/authorizations/337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e/resumption.\n\n- \"337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e\" is the unique operation identifier generated at payment creation/authorization.\n- \"resumption\" indicates it's the inquiry endpoint.\n    \n\n<u>SPWRES Response payload from the PSP:</u>\n\n1. Operational fields\n    \n\n| Field | Description | Format | M/O/C | Example |\n| --- | --- | --- | --- | --- |\n| id | Amadeus Operation identifier. This identifier is generated by Amadeus Payment Platform and uniquely represents this operation. | string | M |  |\n| externalId | Identifier of the operation generated by the PSP. | string | M |  |\n| status | Operation Status | string | M |  |\n| timestamp | Datetime of the operation | date-time | O |  |\n\n2\\. Error fields:\n\n| Field | Description | Format | M/O/C | Example |\n| --- | --- | --- | --- | --- |\n| errors/status | The HTTP status code of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status. | integer | M |  |\n| errors/code | A machine-readable error code, that will enable the API Consumers code to handle this type of error | integer | M |  |\n| errors/title | An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized | string | M |  |\n| errors/detail | An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fieldâ€™s value can be localized. | string | O |  |\n| errors/source/parameter | The key of the URI path or query parameter that caused the error | string | O |  |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27781027",
		"_collection_link": "https://galactic-star-541813.postman.co/workspace/VNPay-Sandbox~3ab04a4c-51f3-4c63-9d60-f0ae8491799a/collection/27781027-f8f898b0-0842-4c31-9bde-fe87a523d364?action=share&source=collection_link&creator=27781027"
	},
	"item": [
		{
			"name": "Success case",
			"item": [
				{
					"name": "201 - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the expected status code (201)\r",
									"pm.test(\"Status code is 201 OK\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Validate the response structure\r",
									"pm.test(\"Response has the correct structure\", function() {\r",
									"    pm.expect(responseBody).to.have.property(\"data\");\r",
									"    pm.expect(responseBody.data).to.have.property(\"id\");\r",
									"    pm.expect(responseBody.data).to.have.property(\"externalId\");\r",
									"    pm.expect(responseBody.data).to.have.property(\"status\");\r",
									"    pm.expect(responseBody.data).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"// Validate data types\r",
									"pm.test(\"Response data types are correct\", function () {\r",
									"    pm.expect(responseBody.data.id).to.be.a('string');\r",
									"    pm.expect(responseBody.data.externalId).to.be.a('string');\r",
									"    pm.expect(responseBody.data.status).to.be.a('string');\r",
									"    pm.expect(responseBody.data.timestamp).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Validate specific property values\r",
									"pm.test(\"Response property values are correct\", function () {\r",
									"    pm.expect(responseBody.data.id).to.eql(\"0cd095ad-4406-4bd6-9d06-38b542efb070\");\r",
									"    pm.expect(responseBody.data.externalId).to.eql(\"KK65Y8APSP11730662172\");\r",
									"    pm.expect(responseBody.data.status).to.eql(\"AUTHORIZED\");\r",
									"    pm.expect(responseBody.data.timestamp).to.eql(\"2023-09-07T06:37:55Z\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{resumption_reference}}{{id}}{{resumption}}",
							"host": [
								"{{base_url}}{{resumption_reference}}{{id}}{{resumption}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{resumption_reference}}{{id}}{{resumption}}",
									"host": [
										"{{base_url}}{{resumption_reference}}{{id}}{{resumption}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"data\": {\r\n        \"id\": \"{{id}}\",\r\n        \"externalId\": \"{{externalId}}\",\r\n        \"status\": \"{{status}}\",\r\n        \"timestamp\": \"{{timestamp}}\"\r\n    }\r\n        \r\n}\r\n"
						}
					]
				}
			],
			"description": "In the Success test scenario using Postman collection, the API request is successfully sent, and the expected response is received within the specified parameters. All essential data fields are accurately processed, demonstrating seamless communication and confirming the system's ability to handle requests efficiently."
		},
		{
			"name": "Error cases",
			"item": [
				{
					"name": "400 - Invalid format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"source\").that.is.an(\"object\");\r",
									"    pm.expect(errors[0].source).to.have.property(\"parameter\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(400);\r",
									"    pm.expect(error.code).to.equal(477);\r",
									"    pm.expect(error.title).to.equal(\"INVALID FORMAT\");\r",
									"    pm.expect(error.detail).to.equal(\"The currency code is invalid\");\r",
									"    pm.expect(error.source.parameter).to.equal(\"amount/currencyCode\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"Passing different id in the end point to mock different response\r",
									"Here passing - id1\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{resumption_reference}}{{id1}}{{resumption}}",
							"host": [
								"{{base_url}}{{resumption_reference}}{{id1}}{{resumption}}"
							]
						}
					},
					"response": [
						{
							"name": "400 - Invalid format",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{resumption_reference}}{{id1}}{{resumption}}",
									"host": [
										"{{base_url}}{{resumption_reference}}{{id1}}{{resumption}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "Location",
									"value": "{{BASE-URL}}{{REFERENCE_TYPE_AUTH}}{{Id}}{{Resumption}}",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{  \r\n\"errors\": [\r\n    {\r\n      \"status\": 400,\r\n      \"code\": 477,\r\n      \"title\": \"INVALID FORMAT\",\r\n      \"detail\": \"The currency code is invalid\",\r\n      \"source\":\r\n      {\r\n        \"parameter\": \"amount/currencyCode\"\r\n      }\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "409 - Payment transaction expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 409 status code\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"source\").that.is.an(\"object\");\r",
									"    pm.expect(errors[0].source).to.have.property(\"parameter\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(409);\r",
									"    pm.expect(error.code).to.equal(33479);\r",
									"    pm.expect(error.title).to.equal(\"PAYMENT TRANSACTION EXPIRED\");\r",
									"    pm.expect(error.detail).to.equal(\"Payment transaction expired\");\r",
									"    pm.expect(error.source.parameter).to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"Passing different id in the end point to mock different response\r",
									"Here passing - id1\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{resumption_reference}}{{id2}}{{resumption}}",
							"host": [
								"{{base_url}}{{resumption_reference}}{{id2}}{{resumption}}"
							]
						}
					},
					"response": [
						{
							"name": "409 - expired",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{resumption_reference}}{{id2}}{{resumption}}",
									"host": [
										"{{base_url}}{{resumption_reference}}{{id2}}{{resumption}}"
									]
								}
							},
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "Location",
									"value": "{{BASE-URL}}{{REFERENCE_TYPE_AUTH}}{{Id}}{{Resumption}}",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{  \r\n\"errors\": [\r\n    {\r\n      \"status\": 409,\r\n      \"code\": 33479,\r\n      \"title\": \"PAYMENT TRANSACTION EXPIRED\",\r\n      \"detail\": \"Payment transaction expired\",\r\n      \"source\":\r\n      {\r\n        \"parameter\": \"\"\r\n      }\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "502 - Timeout error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 502 status code\", function () {\r",
									"    pm.response.to.have.status(502);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"source\").that.is.an(\"object\");\r",
									"    pm.expect(errors[0].source).to.have.property(\"parameter\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(502);\r",
									"    pm.expect(error.code).to.equal(5038);\r",
									"    pm.expect(error.title).to.equal(\"TIMEOUT ERROR UNKNOWN\");\r",
									"    pm.expect(error.detail).to.equal(\"Time out error, unknown reason\");\r",
									"    pm.expect(error.source.parameter).to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"Passing different id in the end point to mock different response\r",
									"Here passing - id1\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{resumption_reference}}{{id3}}{{resumption}}",
							"host": [
								"{{base_url}}{{resumption_reference}}{{id3}}{{resumption}}"
							]
						}
					},
					"response": [
						{
							"name": "502 - Timeout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{resumption_reference}}{{id3}}{{resumption}}",
									"host": [
										"{{base_url}}{{resumption_reference}}{{id3}}{{resumption}}"
									]
								}
							},
							"status": "Bad Gateway",
							"code": 502,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "Location",
									"value": "{{BASE-URL}}{{REFERENCE_TYPE_AUTH}}{{Id}}{{Resumption}}",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{  \r\n\"errors\": [\r\n    {\r\n      \"status\": 502,\r\n      \"code\": 5038,\r\n      \"title\": \"TIMEOUT ERROR UNKNOWN\",\r\n      \"detail\": \"Time out error, unknown reason\",\r\n      \"source\":\r\n      {\r\n        \"parameter\": \"\"\r\n      }\r\n    }\r\n  ]\r\n}"
						}
					]
				},
				{
					"name": "424 - Insufficient funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should have a 424 status code\", function () {\r",
									"    pm.response.to.have.status(424);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").to.be.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").to.be.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").to.be.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").to.be.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"source\").to.be.an(\"object\");\r",
									"    pm.expect(errors[0].source).to.have.property(\"parameter\").to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(424);\r",
									"    pm.expect(error.code).to.equal(12550);\r",
									"    pm.expect(error.title).to.equal(\"AUTHORISATION DENIED INSUFFICIENT FUNDS\");\r",
									"    pm.expect(error.detail).to.equal(\"Authorisation denied due to insufficient funds\");\r",
									"    pm.expect(error.source.parameter).to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"Passing different id in the end point to mock different response\r",
									"Here passing - id1\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{resumption_reference}}{{id4}}{{resumption}}",
							"host": [
								"{{base_url}}{{resumption_reference}}{{id4}}{{resumption}}"
							]
						}
					},
					"response": [
						{
							"name": "424 - Insufficient funds",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{resumption_reference}}{{id4}}{{resumption}}",
									"host": [
										"{{base_url}}{{resumption_reference}}{{id4}}{{resumption}}"
									]
								}
							},
							"status": "Failed Dependency (WebDAV) (RFC 4918)",
							"code": 424,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "Location",
									"value": "{{BASE-URL}}{{REFERENCE_TYPE_AUTH}}{{Id}}{{Resumption}}",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{  \r\n\"errors\": [\r\n    {\r\n      \"status\": 424,\r\n      \"code\": 12550,\r\n      \"title\": \"AUTHORISATION DENIED INSUFFICIENT FUNDS\",\r\n      \"detail\": \"Authorisation denied due to insufficient funds\",\r\n      \"source\":\r\n      {\r\n        \"parameter\": \"\"\r\n      }\r\n    }\r\n  ]\r\n}"
						}
					]
				}
			],
			"description": "In error cases, the Postman collection rigorously tests various scenarios, including 400, 409, 425, 500, and 502 errors. Each test simulates a distinct error condition, ensuring the system responds appropriately to different issues. This comprehensive approach guarantees robust error handling and enhances the API's resilience in diverse failure scenarios."
		}
	]
}