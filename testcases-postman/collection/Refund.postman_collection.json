{
	"info": {
		"_postman_id": "bd2f7db1-9652-4668-b9bd-ef66133cc2bf",
		"name": "Refund",
		"description": "A refund shall be initiated for the transaction where authorization and capture (1-Step) are completed; it allows a partial or full refund as well.\n\nThe end point is: [https://your-host-name/outpayce/v1/refunds/{id}](https://your-host-name/outpayce/v1/refunds/{id})\n\n**Mandatory & optional fields:**\n\n<u>Request payload:</u>\n\n| Field | Description | Format | M/O/C? |\n| --- | --- | --- | --- |\n| id | Amadeus Operation identifier | string | M |\n| parentOperationId | Identifier of a previous operation belonging to the same payment | string | M |\n| externalId | Identifier of the operation generated by PSP | string | O |\n| method | The method of payment - AMOP | string | M |\n| purposeOfOperation/sales/salesItems/flightSalesDetails/ticketNumber | Ticket number of the flight | string | O |\n| operationContext/merchantAccount/name | Name identifying the merchant in the service host system ( i.e. Merchant ID) | string | M |\n| operationContext/merchantAccount/login | Login of a user registered in the service host system and belonging to the merchant. | string | M |\n| operationContext/merchantAccount/password/payload | This contains the payload of the document. It can either be raw data or encoded data in b6se4. see details in metaData block | string | M |\n| operationContext/links/href | Absolute or relative URL (webhook) | string | M |\n| operationContext/links/rel | Relation of the URL | string | M |\n| amount/value | The value of amount | string | M |\n| amount/currencyCode | The currency code of the amount | string | M |\n| instrument/paymentSystem | Represents the supported payment system chosen by the payer from a predetermined list | string | M |\n| paymentMerchantReference | Operation merchant reference. Identifier of the operation generated by the merchant. | string | M |\n| pspReconciliationReference | Authorization PSP reference provided for reconciliation purpose. This reference is generated by the payee in order to reconciliate the payment settlement against the sales. | string | M |\n\n<u>Response payload:</u>\n\n| Field | Description | Format | M/O/C? |\n| --- | --- | --- | --- |\n| id | Amadeus Operation identifier. This identifier is generated by Amadeus Payment Platform and uniquely represents this operation. | string | M |\n| parentOperationId | Identifier of a previous operation belonging to the same payment. | string | M |\n| externalId | Identifier of the operation generated by PSP | string | O |\n| status | Operation status | string | M |\n| timestamp | Datetime of the operation | string | M |\n| operationContext/merchantAccount/name | Name identifiying the merchant in the service host system. ( i.e. Merchant ID) | string | O |\n| amount/value | The value of amount | string | M |\n| amount/currencyCode | Currency of the amount | string | M |\n| paymentMerchantReference | Operation merchant reference. Identifier of the operation generated by the merchant. | string | M |\n| pspReconciliationReference | Authorization PSP reference provided for reconciliation purpose (also identified as PRR in other Amadeus payment applications). This reference is generated by the payee in order to reconciliate the payment settlement against the sales. | string | M |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27781027",
		"_collection_link": "https://galactic-star-541813.postman.co/workspace/VNPay-Sandbox~3ab04a4c-51f3-4c63-9d60-f0ae8491799a/collection/27781027-bd2f7db1-9652-4668-b9bd-ef66133cc2bf?action=share&source=collection_link&creator=27781027"
	},
	"item": [
		{
			"name": "Success case",
			"item": [
				{
					"name": "Simple use case",
					"item": [
						{
							"name": "201- Created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201 OK\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has correct structure\", function() {\r",
											"    pm.expect(responseBody).to.have.property(\"data\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"parentOperationId\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"status\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"timestamp\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"method\");\r",
											"});\r",
											"\r",
											"// Validate data types\r",
											"pm.test(\"Response data types are correct\", function () {\r",
											"    pm.expect(responseBody.data.id).to.be.a('string');\r",
											"    pm.expect(responseBody.data.parentOperationId).to.be.a('string');\r",
											"    pm.expect(responseBody.data.status).to.be.a('string');\r",
											"    pm.expect(responseBody.data.timestamp).to.be.a('string');\r",
											"    pm.expect(responseBody.data.method).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Validate specific property values\r",
											"pm.test(\"Response property values are correct\", function() {\r",
											"    pm.expect(responseBody.data.id).to.eql(\"7c65a92d-3eb1-4b7a-a8f6-9e1f5904381c\");\r",
											"    pm.expect(responseBody.data.parentOperationId).to.eql(\"a29874-f68c189c-c617-5876-b1ae-6d6aec9c812a\");\r",
											"    pm.expect(responseBody.data.status).to.eql(\"RECEIVED\");\r",
											"    pm.expect(responseBody.data.timestamp).to.eql(\"2022-11-29-T11:22:00Z\");\r",
											"    pm.expect(responseBody.data.method).to.eql(\"AMOP\");\r",
											"});\r",
											"\r",
											"// Test for the Content-Type header in the request\r",
											"pm.test(\"Request Content-Type is application/vnd.api+json\", function () {\r",
											"    pm.expect(pm.request.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"\r",
											"// Importing the moment.js library\r",
											"var moment = require('moment');\r",
											"\r",
											"// Current timestamp in the desired format\r",
											"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
											"\r",
											"// Updating the \"timestamp\" field in JSON request body\r",
											"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
											"\r",
											"webhook url syntax: https://{your-organization-name-in-outpayce}.payment.feeds.amadeus.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/refunds/{refundId}/events\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id1}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{refund_reference}}{{id1}}",
									"host": [
										"{{base_url}}{{refund_reference}}{{id1}}"
									]
								}
							},
							"response": [
								{
									"name": "Received",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "{{content-type}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id1}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{refund_reference}}{{id1}}",
											"host": [
												"{{base_url}}{{refund_reference}}{{id1}}"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "{{content-type}}",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"id\": \"{{id1}}\",\n        \"parentOperationId\": \"{{parentOperationId}}\",\n        \"status\": \"{{status}}\",\n        \"method\": \"AMOP\",\n        \"timestamp\": \"{{timestamp}}\"\n    }\n}    "
								}
							]
						}
					],
					"description": "In this simple use case, the request includes only the essential fields required by the Payment Service Provider (PSP) for processing.\n\nThe provided information comprises the mandatory elements necessary for the PSP to carry out the requested transaction efficiently"
				},
				{
					"name": "Standard use case",
					"item": [
						{
							"name": "201- Created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201 OK\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has correct structure\", function() {\r",
											"    pm.expect(responseBody).to.have.property(\"data\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"parentOperationId\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"status\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"timestamp\");\r",
											"    pm.expect(responseBody.data).to.have.property(\"method\");\r",
											"});\r",
											"\r",
											"// Validate data types\r",
											"pm.test(\"Response data types are correct\", function () {\r",
											"    pm.expect(responseBody.data.id).to.be.a('string');\r",
											"    pm.expect(responseBody.data.parentOperationId).to.be.a('string');\r",
											"    pm.expect(responseBody.data.status).to.be.a('string');\r",
											"    pm.expect(responseBody.data.timestamp).to.be.a('string');\r",
											"    pm.expect(responseBody.data.method).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Validate specific property values\r",
											"pm.test(\"Response property values are correct\", function() {\r",
											"    pm.expect(responseBody.data.id).to.eql(\"7c65a92d-3eb1-4b7a-a8f6-9e1f5904381c\");\r",
											"    pm.expect(responseBody.data.parentOperationId).to.eql(\"a29874-f68c189c-c617-5876-b1ae-6d6aec9c812a\");\r",
											"    pm.expect(responseBody.data.status).to.eql(\"RECEIVED\");\r",
											"    pm.expect(responseBody.data.timestamp).to.eql(\"2022-11-29-T11:22:00Z\");\r",
											"    pm.expect(responseBody.data.method).to.eql(\"AMOP\");\r",
											"});\r",
											"\r",
											"// Test for the Content-Type header in the request\r",
											"pm.test(\"Request Content-Type is application/vnd.api+json\", function () {\r",
											"    pm.expect(pm.request.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"\r",
											"// Importing the moment.js library\r",
											"var moment = require('moment');\r",
											"\r",
											"// Current timestamp in the desired format\r",
											"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
											"\r",
											"// Updating the \"timestamp\" field in JSON request body\r",
											"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
											"\r",
											"webhook url syntax: https://{your-organization-name-in-outpayce}.payment.feeds.amadeus.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/refunds/{refundId}/events\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"externalId\": \"{{externalId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"purposeOfOperation\": {\r\n            \"sales\": [\r\n                {\r\n                    \"salesItems\": [\r\n                        {\r\n                            \"flightSalesDetails\": {\r\n                                \"ticketNumber\": \"{{ticketNumber}}\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{refund_reference}}{{id1}}",
									"host": [
										"{{base_url}}{{refund_reference}}{{id1}}"
									]
								}
							},
							"response": [
								{
									"name": "Received",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "{{content-type}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"externalId\": \"{{externalId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"purposeOfOperation\": {\r\n            \"sales\": [\r\n                {\r\n                    \"salesItems\": [\r\n                        {\r\n                            \"flightSalesDetails\": {\r\n                                \"ticketNumber\": \"{{ticketNumber}}\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{refund_reference}}{{id1}}",
											"host": [
												"{{base_url}}{{refund_reference}}{{id1}}"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "{{content-type}}",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"id\": \"{{id1}}\",\n        \"parentOperationId\": \"{{parentOperationId}}\",\n        \"status\": \"{{status}}\",\n        \"method\": \"AMOP\",\n        \"timestamp\": \"{{timestamp}}\"\n    }\n}    "
								}
							]
						}
					],
					"description": "In the standard use case, the request sent to the Payment Service Provider (PSP) includes both mandatory and optional fields.\n\nAlong with the essential information required for processing, This encompasses sales items, specifically the ticket number and the externalID elements are included providing supplementary data that may enhance the transaction or offer additional context."
				}
			],
			"description": "In the Success test scenario using Postman collection, the API request is successfully sent, and the expected response is received within the specified parameters. All essential data fields are accurately processed, demonstrating seamless communication and confirming the system's ability to handle requests efficiently."
		},
		{
			"name": "Error cases",
			"item": [
				{
					"name": "409 - Expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 409 status code\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(409);\r",
									"    pm.expect(error.code).to.equal(33479);\r",
									"    pm.expect(error.title).to.equal(\"PAYMENT TRANSACTION EXPIRED\");\r",
									"    pm.expect(error.detail).to.equal(\"Expired transaction\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id2}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{refund_reference}}{{id2}}",
							"host": [
								"{{base_url}}{{refund_reference}}{{id2}}"
							]
						}
					},
					"response": [
						{
							"name": "Expired",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id2}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{refund_reference}}{{id2}}",
									"host": [
										"{{base_url}}{{refund_reference}}{{id2}}"
									]
								}
							},
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\":[ {\n        \"status\": 409,\n        \"code\": 33479,\n        \"title\": \"PAYMENT TRANSACTION EXPIRED\",\n        \"detail\": \"Expired transaction\"\n            }\n                ]\n}"
						}
					]
				},
				{
					"name": "424 - Payment declined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 424 status code\", function () {\r",
									"    pm.response.to.have.status(424);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(424);\r",
									"    pm.expect(error.code).to.equal(33471);\r",
									"    pm.expect(error.title).to.equal(\"PAYMENT ACTION DECLINED\");\r",
									"    pm.expect(error.detail).to.equal(\"Payment declined\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id3}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{refund_reference}}{{id3}}",
							"host": [
								"{{base_url}}{{refund_reference}}{{id3}}"
							]
						}
					},
					"response": [
						{
							"name": "Declined",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id3}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{refund_reference}}{{id3}}",
									"host": [
										"{{base_url}}{{refund_reference}}{{id3}}"
									]
								}
							},
							"status": "Failed Dependency (WebDAV) (RFC 4918)",
							"code": 424,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\":[ {\n        \"status\": 424,\n        \"code\": 33471,\n        \"title\": \"PAYMENT ACTION DECLINED\",\n        \"detail\": \"Payment declined\"\n            }\n                ]\n}"
						}
					]
				},
				{
					"name": "500 - System unavailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 500 status code\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(500);\r",
									"    pm.expect(error.code).to.equal(974);\r",
									"    pm.expect(error.title).to.equal(\"SYSTEM UNAVAILABLE\");\r",
									"    pm.expect(error.detail).to.equal(\"System is not available to process\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content-type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id4}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{refund_reference}}{{id4}}",
							"host": [
								"{{base_url}}{{refund_reference}}{{id4}}"
							]
						}
					},
					"response": [
						{
							"name": "System unavailable",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content-type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": \"{{id4}}\",\r\n        \"parentOperationId\": \"{{parentOperationId}}\",\r\n        \"method\": \"AMOP\",\r\n        \"timestamp\": \"{{time_stmap}}\",\r\n        \"operationContext\": {\r\n            \"merchantAccount\": {\r\n                \"name\": \"{{name}}\",\r\n                \"login\": \"{{login}}\",\r\n                \"password\": {\r\n                    \"payload\": \"{{payload}}\"\r\n                }\r\n            },\r\n            \"links\": [\r\n                {\r\n                    \"rel\": \"webhook\",\r\n                    \"href\": \"{{href}}\"\r\n                }\r\n            ]\r\n        },\r\n        \"amount\": {\r\n            \"value\": \"{{value}}\",\r\n            \"currencyCode\": \"{{currencyCode}}\"\r\n        },\r\n        \"instrument\": {\r\n            \"paymentSystem\": \"{{paymentSystem}}\"\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{refund_reference}}{{id4}}",
									"host": [
										"{{base_url}}{{refund_reference}}{{id4}}"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content-type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\":[ {\n        \"status\": 500,\n        \"code\": 974,\n        \"title\": \"SYSTEM UNAVAILABLE\",\n        \"detail\": \"System is not available to process\"\n            }\n                ]\n}"
						}
					]
				}
			],
			"description": "In error cases, the Postman collection rigorously tests various scenarios, including 400, 409, 425, 500, and 502 errors. Each test simulates a distinct error condition, ensuring the system responds appropriately to different issues. This comprehensive approach guarantees robust error handling and enhances the API's resilience in diverse failure scenarios."
		}
	]
}