{
	"info": {
		"_postman_id": "e970ee51-74b3-42d9-99ab-d30789f770ee",
		"name": "Authorization - 1 Step",
		"description": "Authorization call is initiated from 1A to the PSP to obtain a redirection URL, which is subsequently provided to the end user to complete the payment.\n\nThe authorization endpoint sent from 1A to the PSP is: `https://your-host-name/outpayce/v1/authorizations/337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e`.\"\n\n<u>SPWREQ Request payload to the PSP:</u>\n\nIn the SPWREQ, the authorization URL is included in the SPW segment along with the request payload in the BLB segment.\n\nFor example: SPW+AMADEUS+/outpayce/v1/authorizations/337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e\n\n- \"337b78dd-1a8d-42a7-8dd5-9c2ce0e62f5e\" is the unique operation identifier generated at payment creation/authorization.\n- \"authorizations\" indicates it's the authorization endpoint.\n    \n\n| Field Key | Field Description | Data Type/Format | Mandatory/Optional/Conditional | Example |\n| --- | --- | --- | --- | --- |\n| id | Amadeus Operation identifier. This identifier is generated by Amadeus Payment Platform and uniquely represents this operation. | string | M |  |\n| method | \"CARD\", \"AMOP\" (alternative method of payment). It drives information requested at authorization time.  <br>\\- If CARD, then card information is provided if the operation is payment related.  <br>\\- If AMOP, then instrument paymentSystem is provided. | string | M | AMOP |\n| reference | Reference identifying the sales. | string | M | PNR RECLOC |\n| referenceType | Type of reference identifying the sales. | string | O | PNR, Merchant Reference |\n| referenceOwner | Owner of the reference type. | string | O | Merchant |\n| category | Category best qualifying the sales item. | string | O | Flights |\n| flightNumber | Flight number associated to the carrier in charge of that flight segment. | string | O |  |\n| departureTime | UTC date and time of the scheduled departure, compliant with ISO8601. | date-time | O |  |\n| departureAirportCode | IATA 3-letter code representing the airport of departure of that flight leg. | string | O |  |\n| arrivalTime | UTC date and time of the scheduled arrival, compliant with ISO8601. | date-time | O |  |\n| arrivalAirportCode | IATA 3-letter code representing the airport of arrival of that flight leg. | string | O |  |\n| carrierCode | IATA code of the carrier in charge of that flight segment. | string | O | UK - Air Vistara |\n| serviceClass | Reference identifying the class of travel and included services (with their conditions and benefits) sold. | string | O | L/N/V |\n| firstName | First name | string | O |  |\n| lastName | Last name | string | O |  |\n| flightPassengerType | Specifies passenger type | string | O |  |\n| timestamp | Datetime of the operation | date-time | M |  |\n| merchantAccount/name | Merchant ID | string | M |  |\n| merchantAccount/login | Login of a user registered in the service host system and belonging to the merchant. | string | M |  |\n| merchantAccount/password/payload |  | string | M |  |\n| links\\[{href,rel}\\] | href: Absolute/relative URL and rel: relation of the link | string | M | The URL to return the user to based on the result: • Success URL • Failure URL • Cancel URL • Keep-Alive URL : The partner sends this to merchant at pre-decided intervals. • Webhook URL : BE notification sent from PSP should hit this endpoint. |\n| ietfLanguageTag | Preferred language tag used by most of modern computing standards as defined in the IETF BCP-47 (eg. \"en\", \"fr-CA\", \"pt-BR\", \"nan-Hant-TW\",...) | string | M | \"en\", \"fr-CA\", \"pt-BR\", \"nan-Hant-TW\" |\n| pointOfInteraction/location/address/countryCode |  | string | M |  |\n| amount/value | Operation Amount value | string | M | 123.45 |\n| amount/currency | Operation Amount currency code following ISO 4217 | string | M | INR |\n| instrument/paymentSystem | Upper case key representing the supported payment system chosen by the payer from a predetermined list of AMOPs | string | M | POLI, Klarna etc. |\n| paymentMerchantReference | Operation merchant reference. Identifier of the operation generated by the merchant. | string | M |  |\n| authorizationType | \"AUTHORIZATION_ONLY\" or “AUTHOR_AND_CAPTURE\". Indicates how the settlement is triggered: • If AUTHORIZATION_ONLY, then the clearing of the authorization needs to be triggered via its dedicated operation, i.e. Capture. • If AUTHOR_AND_CAPTURE, then the clearing and settlement is triggered automatically. | string | M | AUTHOR_AND_CAPTURE |\n\n<u>SPWRES Response payload from PSP:</u>\n\n1. Operation Fields:\n    \n\n| Field | Description | Data Type | M/O/C | Example |\n| --- | --- | --- | --- | --- |\n| externalId | Identifier of the operation generated by the PSP | string | M |  |\n| status | Operation status | string | M | CREATED |\n| timestamp | Datetime of the operation | string | M |  |\n| targetPayloads/href | Direct link of the item | string | M | Web redirection URL |\n| targetPayloads/method | Method of the item | string | M | GET/POST |\n| targetPayloads/formPayload | Name and value of form items (currency: EUR) | string | M |  |\n| targetPayloads/links/href | Absolute or relative URL | string | O |  |\n| targetPayloads/link/rel | Relation of the link | string | O | Resumption, FAQ, etc. |\n\n2\\. Error Response Fields:\n\n| Field | Description | Data Type | M/O/C | Example |\n| --- | --- | --- | --- | --- |\n| errors/status | The HTTP status code of this response. Present only in terminal errors causing an unsuccessful response. All errors must have the same status. | integer | M | 403 |\n| errors/code | A machine-readable error code for API Consumers to handle this error type. | integer | M | 1666 |\n| errors/title | An error title from the Canned Messages table with a 1:1 correspondence to the error code. It may be localized. | string | M | \"NOT ALLOWED\" |\n| errors/detail | An easy-to-read explanation specific to this occurrence of the problem. It helps API consumers understand what went wrong and how to recover. Like the title, this field can be localized. | string | O |  |\n| errors/source/parameter | The key of the URI path or query parameter that caused the error. | string | O |  |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27781027",
		"_collection_link": "https://galactic-star-541813.postman.co/workspace/VNPay-Sandbox~3ab04a4c-51f3-4c63-9d60-f0ae8491799a/collection/27781027-e970ee51-74b3-42d9-99ab-d30789f770ee?action=share&source=collection_link&creator=27781027"
	},
	"item": [
		{
			"name": "Success case",
			"item": [
				{
					"name": "Standard use case",
					"item": [
						{
							"name": "202 - Accepted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for HTTP status code\r",
											"pm.test(\"Status code is 202 OK\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has correct structure\", function() {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"externalId\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"status\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"timestamp\");\r",
											"\r",
											"    // Validate targetPayloads structure\r",
											"    pm.expect(pm.response.json().data.targetPayloads).to.be.an('array');\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"href\");\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"method\");\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"formPayload\");\r",
											"  \r",
											"});\r",
											"\r",
											"// Validate response data type\r",
											"pm.test(\"Response has correct Data Types\", function () {\r",
											"    // Check the data object\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"\r",
											"    // Check externalId data type\r",
											"    pm.expect(pm.response.json().data.externalId).to.be.a('string');\r",
											"\r",
											"    // Check status data type\r",
											"    pm.expect(pm.response.json().data.status).to.be.a('string');\r",
											"\r",
											"    // Check timestamp data type\r",
											"    pm.expect(pm.response.json().data.timestamp).to.be.a('string');\r",
											"\r",
											"    // Check targetPayloads data type\r",
											"    pm.expect(pm.response.json().data.targetPayloads).to.be.an('array');\r",
											"\r",
											"    // Check targetPayloads elements data types\r",
											"    pm.response.json().data.targetPayloads.forEach(function(payload) {\r",
											"        // Check href data type\r",
											"        pm.expect(payload.href).to.be.a('string');\r",
											"\r",
											"        // Check method data type\r",
											"        pm.expect(payload.method).to.be.a('string');\r",
											"\r",
											"        // Check formPayload data type\r",
											"        pm.expect(payload.formPayload).to.be.an('array');\r",
											"\r",
											"        // Check formPayload elements data types\r",
											"        payload.formPayload.forEach(function(formItem) {\r",
											"            // Check name data type\r",
											"            pm.expect(formItem.name).to.be.a('string');\r",
											"\r",
											"            // Check value data type\r",
											"            pm.expect(formItem.value).to.be.a('string');\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate specific property values\r",
											"pm.test(\"Response property values are correct\", function () {\r",
											"    pm.expect(pm.response.json().data.externalId).to.eql(\"AE5AE6APSP11869476172\");\r",
											"    pm.expect(pm.response.json().data.status).to.eql(\"ACCEPTED\");\r",
											"    pm.expect(pm.response.json().data.timestamp).to.eql(\"2023-10-17T05:42:52Z\");\r",
											"\r",
											"    // Validate targetPayloads values\r",
											"    var targetPayload = pm.response.json().data.targetPayloads[0];\r",
											"    pm.expect(targetPayload.href).to.eql(\"http://ncerndobedev6731.etv.nce.amadeus.net:8080/amop/providerapi/index.html\");\r",
											"    pm.expect(targetPayload.method).to.eql(\"POST\");\r",
											"\r",
											"    // Validate formPayload values\r",
											"    pm.expect(targetPayload.formPayload[0].name).to.eql(\"amount\");\r",
											"    pm.expect(targetPayload.formPayload[0].value).to.eql(\"116.05\");\r",
											"    pm.expect(targetPayload.formPayload[1].name).to.eql(\"currency\");\r",
											"    pm.expect(targetPayload.formPayload[1].value).to.eql(\"VND\");\r",
											"});\r",
											"\r",
											"// Test for the Content-Type header\r",
											"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"\r",
											"// Importing the moment.js library\r",
											"var moment = require('moment');\r",
											"\r",
											"// Current timestamp in the desired format\r",
											"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
											"\r",
											"// Updating the \"timestamp\" field in JSON request body\r",
											"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
											"\r",
											"webhook url syntax: https://{your-organization-name-in-outpayce}.payment.feeds.amadeus.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/refunds/{refundId}/events\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value1}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"response": [
								{
									"name": "Accepted",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "{{content_type}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value1}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{auth_reference}}{{id}}",
											"host": [
												"{{base_url}}{{auth_reference}}{{id}}"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "{{content_type}}",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"externalId\": \"{{externalId}}\",\n        \"status\": \"{{status}}\",\n        \"timestamp\": \"{{timestamp}}\",\n        \"targetPayloads\": [\n            {\n                \"href\": \"{{href}}\",\n                \"method\": \"{{method}}\",\n                \"formPayload\": [\n                    {\n                        \"name\": \"{{name1}}\",\n                        \"value\": \"{{value}}\"\n                    },\n                    {\n                        \"name\": \"{{name2}}\",\n                        \"value\": \"{{currencyCode}}\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								}
							]
						}
					],
					"description": "In this case, the request to the Payment Service Provider (PSP) includes both mandatory and optional fields, encompassing essential flight data and additional sales item details.\n\nThis comprehensive approach ensures the PSP receives a thorough set of information, facilitating seamless processing and accommodating optional elements for a more detailed transaction interaction."
				},
				{
					"name": "Simple use case",
					"item": [
						{
							"name": "202 - Accepted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for HTTP status code\r",
											"pm.test(\"Status code is 202 OK\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has correct structure\", function() {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"data\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"externalId\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"status\");\r",
											"    pm.expect(pm.response.json().data).to.have.property(\"timestamp\");\r",
											"\r",
											"    // Validate targetPayloads structure\r",
											"    pm.expect(pm.response.json().data.targetPayloads).to.be.an('array');\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"href\");\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"method\");\r",
											"    pm.expect(pm.response.json().data.targetPayloads[0]).to.have.property(\"formPayload\");\r",
											"  \r",
											"});\r",
											"\r",
											"// Validate response data type\r",
											"pm.test(\"Response has correct Data Types\", function () {\r",
											"    // Check the data object\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"\r",
											"    // Check externalId data type\r",
											"    pm.expect(pm.response.json().data.externalId).to.be.a('string');\r",
											"\r",
											"    // Check status data type\r",
											"    pm.expect(pm.response.json().data.status).to.be.a('string');\r",
											"\r",
											"    // Check timestamp data type\r",
											"    pm.expect(pm.response.json().data.timestamp).to.be.a('string');\r",
											"\r",
											"    // Check targetPayloads data type\r",
											"    pm.expect(pm.response.json().data.targetPayloads).to.be.an('array');\r",
											"\r",
											"    // Check targetPayloads elements data types\r",
											"    pm.response.json().data.targetPayloads.forEach(function(payload) {\r",
											"        // Check href data type\r",
											"        pm.expect(payload.href).to.be.a('string');\r",
											"\r",
											"        // Check method data type\r",
											"        pm.expect(payload.method).to.be.a('string');\r",
											"\r",
											"        // Check formPayload data type\r",
											"        pm.expect(payload.formPayload).to.be.an('array');\r",
											"\r",
											"        // Check formPayload elements data types\r",
											"        payload.formPayload.forEach(function(formItem) {\r",
											"            // Check name data type\r",
											"            pm.expect(formItem.name).to.be.a('string');\r",
											"\r",
											"            // Check value data type\r",
											"            pm.expect(formItem.value).to.be.a('string');\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate specific property values\r",
											"pm.test(\"Response property values are correct\", function () {\r",
											"    pm.expect(pm.response.json().data.externalId).to.eql(\"AE5AE6APSP11869476172\");\r",
											"    pm.expect(pm.response.json().data.status).to.eql(\"ACCEPTED\");\r",
											"    pm.expect(pm.response.json().data.timestamp).to.eql(\"2023-10-17T05:42:52Z\");\r",
											"\r",
											"    // Validate targetPayloads values\r",
											"    var targetPayload = pm.response.json().data.targetPayloads[0];\r",
											"    pm.expect(targetPayload.href).to.eql(\"http://ncerndobedev6731.etv.nce.amadeus.net:8080/amop/providerapi/index.html\");\r",
											"    pm.expect(targetPayload.method).to.eql(\"POST\");\r",
											"\r",
											"    // Validate formPayload values\r",
											"    pm.expect(targetPayload.formPayload[0].name).to.eql(\"amount\");\r",
											"    pm.expect(targetPayload.formPayload[0].value).to.eql(\"116.05\");\r",
											"    pm.expect(targetPayload.formPayload[1].name).to.eql(\"currency\");\r",
											"    pm.expect(targetPayload.formPayload[1].value).to.eql(\"VND\");\r",
											"});\r",
											"\r",
											"// Test for the Content-Type header\r",
											"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"\r",
											"// Importing the moment.js library\r",
											"var moment = require('moment');\r",
											"\r",
											"// Current timestamp in the desired format\r",
											"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
											"\r",
											"// Updating the \"timestamp\" field in JSON request body\r",
											"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
											"\r",
											"webhook url syntax: https://{your-organization-name-in-outpayce}.payment.feeds.amadeus.com/v1/payment/3rd-party-gateway/{your-organization-name-in-outpayce}/refunds/{refundId}/events\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n     \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value1}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"response": [
								{
									"name": "Accepted",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "{{content_type}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n     \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value1}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{auth_reference}}{{id}}",
											"host": [
												"{{base_url}}{{auth_reference}}{{id}}"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "{{content_type}}",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"externalId\": \"{{externalId}}\",\n        \"status\": \"{{status}}\",\n        \"timestamp\": \"{{timestamp}}\",\n        \"targetPayloads\": [\n            {\n                \"href\": \"{{href}}\",\n                \"method\": \"{{method}}\",\n                \"formPayload\": [\n                    {\n                        \"name\": \"{{name1}}\",\n                        \"value\": \"{{value}}\"\n                    },\n                    {\n                        \"name\": \"{{name2}}\",\n                        \"value\": \"{{currencyCode}}\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								}
							]
						}
					],
					"description": "In this straightforward scenario, the request sent to the Payment Service Provider (PSP) includes solely the mandatory fields essential for processing.\n\nStripped down to only the necessary information, this approach ensures efficiency in communication, providing the PSP with the fundamental data required for successful transaction processing."
				}
			],
			"description": "In the Success test scenario using Postman collection, the API request is successfully sent, and the expected response is received within the specified parameters. All essential data fields are accurately processed, demonstrating seamless communication and confirming the system's ability to handle requests efficiently."
		},
		{
			"name": "Error cases",
			"item": [
				{
					"name": "400 - Invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Test for HTTP status code\r",
									"pm.test(\"Response should have a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(400);\r",
									"    pm.expect(error.code).to.equal(33459);\r",
									"    pm.expect(error.title).to.equal(\"INVALID INPUT PARAM(S) - PLEASE ADJUST REQUEST\");\r",
									"    pm.expect(error.detail).to.equal(\"Please adjust the request\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"// Passing wrong amount to validate 400 - Invalid data, field name is value1\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value2}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{auth_reference}}{{id}}",
							"host": [
								"{{base_url}}{{auth_reference}}{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid data",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value2}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content_type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"status\": 400,\n            \"code\": 33459,\n            \"title\": \"INVALID INPUT PARAM(S) - PLEASE ADJUST REQUEST\",\n            \"detail\": \"Please adjust the request\"\n        }\n    ]\n}\n"
						}
					]
				},
				{
					"name": "400 - Missing mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(400);\r",
									"    pm.expect(error.code).to.equal(33460);\r",
									"    pm.expect(error.title).to.equal(\"MISSING REQUIRED INPUT PARAM(S) - PLEASE ADJUST REQUEST\");\r",
									"    pm.expect(error.detail).to.equal(\"Please adjust the request\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"// Removing mandatory field - currencycode\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{auth_reference}}{{id}}",
							"host": [
								"{{base_url}}{{auth_reference}}{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Missing Mandatory fields",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content_type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"status\": 400,\n            \"code\": 33460,\n            \"title\": \"MISSING REQUIRED INPUT PARAM(S) - PLEASE ADJUST REQUEST\",\n            \"detail\": \"Please adjust the request\"\n        }\n    ]\n}\n"
						}
					]
				},
				{
					"name": "500 - Internal process error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 500 status code\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(500);\r",
									"    pm.expect(error.code).to.equal(414);\r",
									"    pm.expect(error.title).to.equal(\"INTERNAL PROCESSING ERROR\");\r",
									"    pm.expect(error.detail.trim()).to.equal(\"Unable to process\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"\r",
									"Changing passengerType data to PassengerType1 and value to CHILD to mimic 500 error\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType1}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{auth_reference}}{{id}}",
							"host": [
								"{{base_url}}{{auth_reference}}{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Internal processing error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType1}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content_type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\":[ {\n        \"status\": 500,\n        \"code\": 414,\n        \"title\": \"INTERNAL PROCESSING ERROR\",\n        \"detail\": \"Unable to process\"\n            }\n                ]\n}"
						}
					]
				},
				{
					"name": "400 - Invalid format/Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check the HTTP status code\r",
									"pm.test(\"Response should have a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'errors' array\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"errors\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check the properties and data types within the 'errors' array\r",
									"pm.test(\"The 'errors' array should have the expected structure and data types\", function () {\r",
									"    const errors = responseJson.errors;\r",
									"    pm.expect(errors).to.be.an(\"array\");\r",
									"    pm.expect(errors[0]).to.be.an(\"object\");\r",
									"    pm.expect(errors[0]).to.have.property(\"status\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"code\").that.is.a(\"number\");\r",
									"    pm.expect(errors[0]).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"detail\").that.is.a(\"string\");\r",
									"    pm.expect(errors[0]).to.have.property(\"source\").that.is.an(\"object\");\r",
									"    pm.expect(errors[0].source).to.have.property(\"parameter\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check specific values within the response body\r",
									"pm.test(\"Response body should contain expected values\", function () {\r",
									"    const error = responseJson.errors[0];\r",
									"    pm.expect(error.status).to.equal(400);\r",
									"    pm.expect(error.code).to.equal(477);\r",
									"    pm.expect(error.title).to.equal(\"INVALID FORMAT\");\r",
									"    pm.expect(error.detail).to.equal(\"The currency code is invalid\");\r",
									"    pm.expect(error.source.parameter).to.equal(\"amount/currencyCode\");\r",
									"});\r",
									"\r",
									"// Test for the Content-Type header\r",
									"pm.test(\"Response Content-Type includes application/vnd.amadeus+json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.amadeus+json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									"\r",
									"Invalid format can be passing wrong currency as EU instead of EUR which is industry standard.\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{wrongCurrencyCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{auth_reference}}{{id}}",
							"host": [
								"{{base_url}}{{auth_reference}}{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid currency",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{content_type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\",\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{wrongCurrencyCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{auth_reference}}{{id}}",
									"host": [
										"{{base_url}}{{auth_reference}}{{id}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "{{content_type}}",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"status\": 400,\n            \"code\": 477,\n            \"title\": \"INVALID FORMAT\",\n            \"detail\": \"The currency code is invalid\",\n            \"source\": {\n                \"parameter\": \"amount/currencyCode\"\n            }\n        }\n    ]\n}\n"
						}
					]
				},
				{
					"name": "400 - Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 400 OK\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Check the root structure\r",
									"pm.test(\"Response should have an 'error' object\", function () {\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"    pm.expect(responseJson).to.have.property(\"error\");\r",
									"    pm.expect(responseJson.error).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Check the properties of the 'error' object\r",
									"pm.test(\"The 'error' object should have the expected properties and data types\", function () {\r",
									"    const error = responseJson.error;\r",
									"\r",
									"    pm.expect(error).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Importing the moment.js library\r",
									"var moment = require('moment');\r",
									"\r",
									"// Current timestamp in the desired format\r",
									"var currentTimestamp = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\");\r",
									"\r",
									"// Updating the \"timestamp\" field in JSON request body\r",
									"pm.collectionVariables.set(\"timestamp\", currentTimestamp);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{content_type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\"\r\n    // Removed comma(,) after the method name\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{auth_reference}}{{id}}",
							"host": [
								"{{base_url}}{{auth_reference}}{{id}}"
							]
						}
					},
					"response": [
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.amadeus+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{id}}\",\r\n    \"method\": \"AMOP\"\r\n    // Removed comma(,) after the method name\r\n    \"purposeOfOperation\": {\r\n      \"sales\": [\r\n        {\r\n          \"reference\": \"{{reference}}\",\r\n          \"referenceOwner\": \"{{referenceOwner}}\",\r\n          \"referenceType\": \"{{referenceType}}\",\r\n          \"salesItems\": {\r\n            \"category\": \"{{category}}\",\r\n            \"flightSalesDetails\": {\r\n              \"flightLegs\": [\r\n                {\r\n                  \"flightNumber\": \"{{flightNumber}}\",\r\n                  \"departureTime\": \"{{deptTime}}\",\r\n                  \"departureAirportCode\": \"{{deptCode}}\",\r\n                  \"arrivalTime\": \"{{arrvTime}}\",\r\n                  \"arrivalAirportCode\": \"{{arrvCode}}\",\r\n                  \"carrierCode\": \"{{carrierCode}}\",\r\n                  \"serviceClass\": \"{{serviceClass}}\"\r\n                }\r\n              ]\r\n            },\r\n            \"passenger\": {\r\n              \"name\": {\r\n                \"firstName\": \"{{firstName}}\",\r\n                \"lastName\": \"{{lastName}}\"\r\n              },\r\n              \"flightPassengerType\": \"{{passengerType}}\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"pointOfInteraction\": {\r\n      \"location\": {\r\n        \"address\": {\r\n          \"countryCode\": \"{{countryCode}}\"\r\n        }\r\n      }\r\n    },\r\n    \"timestamp\": \"{{timeStamp}}\",\r\n    \"operationContext\": {\r\n      \"merchantAccount\": {\r\n        \"name\": \"{{name}}\",\r\n        \"login\": \"{{login}}\",\r\n        \"password\": {\r\n          \"payload\": \"{{payload}}\"\r\n        }\r\n      },\r\n      \"links\": [\r\n        {\r\n          \"href\": \"{{default-callback_href}}\",\r\n          \"rel\": \"default-callback\"\r\n        },\r\n        {\r\n          \"href\": \"{{webhook_href}}\",\r\n          \"rel\": \"webhook\"\r\n        }\r\n      ],\r\n      \"device\": {\r\n        \"activeBrowser\": {\r\n            \"ietfLanguageTag\": \"{{ietfLanguageTag}}\"\r\n          }\r\n      }\r\n    },\r\n    \"amount\": {\r\n      \"value\": \"{{value}}\",\r\n      \"currencyCode\": \"{{currencyCode}}\"\r\n    },\r\n    \"instrument\": {\r\n      \"paymentSystem\": \"{{paymentSystem}}\"\r\n    },\r\n    \"paymentMerchantReference\": \"{{paymentMerchantReference}}\",\r\n    \"authorizationType\": \"{{authorizationType}}\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://46d5b51e-b801-47f1-837f-545f14c516b4.mock.pstmn.io/v1/authorizations/0cd095ad-4406-4bd6-9d06-38b542efb071",
									"protocol": "https",
									"host": [
										"46d5b51e-b801-47f1-837f-545f14c516b4",
										"mock",
										"pstmn",
										"io"
									],
									"path": [
										"v1",
										"authorizations",
										"0cd095ad-4406-4bd6-9d06-38b542efb071"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.amadeus+json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"externalId\": \"{{externalId}}\",\n        \"status\": \"{{status}}\",\n        \"timestamp\": \"{{timestamp}}\",\n        \"targetPayloads\": [\n            {\n                \"href\": \"{{href}}\",\n                \"method\": \"{{method}}\",\n                \"formPayload\": [\n                    {\n                        \"name\": \"{{name1}}\",\n                        \"value\": \"{{value}}\"\n                    },\n                    {\n                        \"name\": \"{{name2}}\",\n                        \"value\": \"{{currencyCode}}\"\n                    },\n                    {\n                        \"name\": \"{{name3}}\",\n                        \"value\": \"{{value2}}\"\n                    },\n                    {\n                        \"name\": \"{{name4}}\",\n                        \"value\": \"{{value3}}\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						}
					]
				}
			],
			"description": "In error cases, the Postman collection rigorously tests various scenarios, including 400, 409, 425, 500, and 502 errors. Each test simulates a distinct error condition, ensuring the system responds appropriately to different issues. This comprehensive approach guarantees robust error handling and enhances the API's resilience in diverse failure scenarios."
		}
	],
	"variable": [
		{
			"key": "timestamp",
			"value": ""
		}
	]
}